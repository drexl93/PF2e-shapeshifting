{"name":"Wild Shape","permission":{"default":0,"TKPF0VhpkrvAyBOK":3},"type":"script","flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"// TODO: See if you can add special form notes (like Sharks only breathing underwater) to Biography\r\n\r\n// ----------------------------------------------------------------\r\n// FORM STATS.\r\n//\r\n\r\nlet formGroups = [ // contains Attack info for the forms\r\n    {\r\n        group: \"Wild Shape: Pest Form\", // Doubles as the Feat Name and the Heading under which the form options are displayed in the selection menu\r\n        class: \"pestForm\", // Used to link to the correct Scaling Attributes group\r\n        forms: [\r\n            {\r\n                name: \"Pest\",\r\n                attacks: [],\r\n                weaknesses: {piercing: \"5\", bludgeoning: \"5\", slashing: \"5\"},\r\n                speed: {value: 10, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\",label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\r\n                skills: {athletics: -4},\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        group: \"Wild Shape: Animal Form\", // Doubles as the Feat Name and the Heading under which the form options are displayed in the selection menu\r\n        class: \"animalForm\", // Used to link to the correct Scaling Attributes group\r\n        forms: [\r\n            {\r\n                name: \"Ape\", \r\n                attacks: [{name: \"Fist\", dsize: 6, dnum: 2, type: \"Bludgeoning\"}], \r\n                speed: {value: 30, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"20\", exceptions: \"\"}]}, \r\n                senses: [{type: \"lowLightVision\",label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\r\n            }, \r\n            {\r\n                name: \"Bear\", \r\n                attacks: [{name: \"Jaws\", dsize: 8, dnum: 2, type: \"Piercing\"},{name: \"Claw (agile)\", dsize: 8, dnum: 1, type: \"Slashing\"}],\r\n                speed: {value: 30, special: \"\", otherSpeeds: []}, \r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\r\n            }, \r\n            {\r\n                name: \"Bull\", \r\n                attacks: [{name: \"Horn\", dsize: 8, dnum: 2, type: \"Piercing\"}], \r\n                speed: {value: 30, special: \"\", otherSpeeds: []}, \r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\r\n            },\r\n            {\r\n                name: \"Canine\", \r\n                attacks: [{name: \"Jaws\", dsize: 8, dnum: 2, type: \"Piercing\"}],\r\n                speed: {value: 40, special: \"\", otherSpeeds: []}, \r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\r\n            },\r\n            {\r\n                name: \"Cat\", \r\n                attacks: [{name: \"Jaws\", dsize: 6, dnum: 2, type: \"Piercing\"}, {name: \"Claw (agile)\", dsize: 10, dnum: 1, type: \"Slashing\"}], \r\n                speed: {value: 40, special: \"\", otherSpeeds: []}, \r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\r\n            },\r\n            {\r\n                name: \"Deer\", \r\n                attacks: [{name: \"Antler\", dsize: 6, dnum: 2, type: \"Piercing\"}], \r\n                speed: {value: 50, special: \"\", otherSpeeds: []}, \r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\r\n            },\r\n            {\r\n                name: \"Frog\", \r\n                attacks: [{name: \"Jaws\", dsize: 6, dnum: 2, type: \"Bludgeoning\"}, {name: \"Tongue\", dsize: 4, dnum: 2, type: \"Bludgeoning\"}], \r\n                speed: {value: 25, special: \"\", otherSpeeds: [{type: \"swim\", label: \"Swim\", value: \"25\", exceptions: \"\"}]}, \r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\r\n            },\r\n            {\r\n                name: \"Shark\", \r\n                attacks: [{name: \"Jaws\", dsize: 8, dnum: 2, type: \"Piercing\"}], \r\n                speed: {value: 0, special: \"\", otherSpeeds: [{type: \"swim\", label: \"Swim\", value: \"35\", exceptions: \"\"}]}, \r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\r\n            },\r\n            {\r\n                name: \"Snake\", \r\n                attacks: [{name: \"Fangs\", dsize: 4, dnum: 2, type: \"Piercing\"}], \r\n                plusattacks: [{name: \"Fangs\", dsize: 6, dnum: 1, type: \"Poison\"}], // plusattacks add additional damage to the same-name primary attack. Can support multiple different instances of additional damage.\r\n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"20\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"20\", exceptions: \"\"}]}, \r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\r\n            } \r\n        ]\r\n    },\r\n    \r\n    {\r\n        group: \"Insect Shape\",\r\n        class: \"insectShape\",\r\n        forms: [\r\n            {\r\n                name: \"Ant\", \r\n                attacks: [{name: \"Mandibles\", dsize: 6, dnum: 2, type: \"Bludgeoning\"}], \r\n                speed: {value: 30, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"30\", exceptions: \"\"}]},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Beetle\",\r\n                attacks: [{name: \"Mandibles\", dsize: 10, dnum: 2, type: \"Bludgeoning\"}], \r\n                speed: {value: 25, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Centipede\", \r\n                attacks: [{name: \"Mandibles\", dsize: 8, dnum: 1, type: \"Piercing plus 1d4 persistent Poison\"}], \r\n                speed: {value: 25, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"25\", exceptions: \"\"}]},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Mantis\", \r\n                attacks: [{name: \"Foreleg\", dsize: 8, dnum: 2, type: \"Bludgeoning\"}], \r\n                speed: {value: 40, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Scorpion\", \r\n                attacks: [{name: \"Stinger\", dsize: 8, dnum: 1, type: \"Piercing plus 1d4 persistent Poison\"}, {name: \"Pincer (agile)\", dsize: 6, dnum: 1, type: \"Bludgeoning\"}], \r\n                speed: {value: 40, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"tremorsense\", label: \"Imprecise Tremorsense\", value: \"60\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Spider\", \r\n                attacks: [{name: \"Fangs\", dsize: 6, dnum: 1, type: \"Piercing plus 1d4 persistent Poison\"}, {name: \"Web\", dsize: 1, dnum: 0, type: \"None\"}], \r\n                speed: {value: 25, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"25\", exceptions: \"\"}]},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n        ]\r\n    }, \r\n\r\n    { \r\n        group: \"Soaring Shape\",\r\n        class: \"soaringShape\",\r\n        forms: [\r\n            {\r\n                name: \"Bat\", \r\n                attacks: [{name: \"Fangs\", dsize: 8, dnum: 2, type: \"Piercing\"}, {name: \"Wing (agile)\", dsize: 6, dnum: 2, type: \"Bludgeoning\"}], \r\n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"30\", exceptions: \"\"}]},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"echolocation\", label: \"Precise Echolocation\", value: \"40\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Bird\", \r\n                attacks: [{name: \"Beak\", dsize: 8, dnum: 2, type: \"Piercing\"}, {name: \"Talon (agile)\", dsize: 10, dnum: 1, type: \"Slashing\"}], \r\n                speed: {value: 10, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"50\", exceptions: \"\"}]},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Pterosaur\", \r\n                attacks: [{name: \"Beak\", dsize: 6, dnum: 3, type: \"Piercing\"}], \r\n                extraFeat: \"Ferocious Shape\", \r\n                speed: {value: 10, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"40\", exceptions: \"\"}]},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Wasp\", \r\n                attacks: [{name: \"Stinger\", dsize: 8, dnum: 1, type: \"Piercing plus 1d6 persistent Poison\"}], \r\n                extraFeat: \"Insect Shape\", \r\n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"40\", exceptions: \"\"}]},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n        ]\r\n    },\r\n\r\n    { \r\n        group: \"Ferocious Shape\",\r\n        class: \"ferociousShape\",\r\n        forms: [\r\n            {\r\n                name: \"Ankylosaurus\", \r\n                attacks: [{name: \"Tail\", dsize: 6, dnum: 2, type: \"Bludgeoning\"}, {name: \"Foot\", dsize: 6, dnum: 2, type: \"Bludgeoning\"}], \r\n                speed: {value: 25, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Brontosaurus\", \r\n                attacks: [{name: \"Tail\", dsize: 6, dnum: 2, type: \"Bludgeoning\"}, {name: \"Foot\", dsize: 8, dnum: 2, type: \"Bludgeoning\"}], \r\n                speed: {value: 25, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Deinonychus\", \r\n                attacks: [{name: \"Talon (agile)\", dsize: 4, dnum: 2, type: \"Piercing plus 1 persistent Bleed\"}, {name: \"Jaws\", dsize: 10, dnum: 1, type: \"Piercing\"}], \r\n                speed: {value: 40, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Stegosaurus\", \r\n                attacks: [{name: \"Tail\", dsize: 8, dnum: 2, type: \"Piercing\"}], \r\n                speed: {value: 30, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Triceratops\", \r\n                attacks: [{name: \"Horn\", dsize: 8, dnum: 2, type: \"Piercing plus 1d6 persistent Bleed on a Crit\"}, {name: \"Foot\", dsize: 6, dnum: 2, type: \"Bludgeoning\"}], \r\n                speed: {value: 30, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Tyrannosaurus\", \r\n                attacks: [{name: \"Jaws\", dsize: 12, dnum: 1, type: \"Piercing\"}, {name: \"Tail\", dsize: 10, dnum: 1, type: \"Bludgeoning\"}], \r\n                speed: {value: 30, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\r\n            },\r\n        ]\r\n    },\r\n\r\n    { \r\n        group: \"Elemental Shape\",\r\n        class: \"elementalShape\",\r\n        forms: [\r\n            {\r\n                name: \"Air\", \r\n                attacks: [{name: \"Gust\", dsize: 4, dnum: 1, type: \"Bludgeoning\"}], \r\n                speed: {value: 0, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"80\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Earth\", \r\n                attacks: [{name: \"Fist\", dsize: 10, dnum: 2, type: \"Bludgeoning\"}], \r\n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"burrow\", label: \"Burrow\", value: \"20\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Fire\", \r\n                attacks: [{name: \"Tendril\", dsize: 8, dnum: 1, type: \"Fire plus 1d4 persistent Fire\"}], \r\n                resistances: {fire: 10}, \r\n                weaknesses: {cold: 5, water: 5}, \r\n                speed: {value: 50, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Water\", \r\n                attacks: [{name: \"Wave\", dsize: 12, dnum: 1, type: \"Bludgeoning\"}], \r\n                resistances: {fire: 5}, \r\n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"swim\", label: \"Swim\", value: \"60\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n        ]\r\n    },\r\n\r\n    { \r\n        group: \"Plant Shape\",\r\n        class: \"plantShape\",\r\n        forms: [\r\n            {\r\n                name: \"Arboreal\", \r\n                attacks: [{name: \"Branch\", dsize: 10, dnum: 2, type: \"Bludgeoning\"}, {name: \"Foot\", dsize: 8, dnum: 2, type: \"Bludgeoning\"}], \r\n                resistances: {poison: 10}, \r\n                speed: {value: 30, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Flytrap\", \r\n                attacks: [{name: \"Leaf\", dsize: 8, dnum: 2, type: \"Piercing\"}], \r\n                resistances: {poison: 10, acid: 10}, \r\n                speed: {value: 15, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Shambler\", \r\n                attacks: [{name: \"Vine\", dsize: 8, dnum: 2, type: \"Slashing\"}], \r\n                resistances: {poison: 10, electricity: 10}, \r\n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"swim\", label: \"Swim\", value: \"20\", exceptions: \"\"}]},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n        ]\r\n    },\r\n\r\n    { \r\n        group: \"Dragon Shape\",\r\n        class: \"dragonShape\",\r\n        forms: [\r\n            {\r\n                name: \"Black\", \r\n                attacks: [{name: \"Jaws\", dsize: 12, dnum: 2, type: \"Piercing\"}, {name: \"Claw (agile)\", dsize: 10, dnum: 3, type: \"Slashing\"}, {name: \"Tail\", dsize: 10, dnum: 3, type: \"Bludgeoning\"}, {name: \"Horns\", dsize: 8, dnum: 3, type: \"Piercing\"}], \r\n                plusattacks: [{name: \"Jaws\", dsize: 6, dnum: 2, type: \"Acid\"}], \r\n                resistances: {acid: 10}, \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"60\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Blue\", \r\n                attacks: [{name: \"Jaws\", dsize: 10, dnum: 2, type: \"Piercing\"}, {name: \"Claw (agile)\", dsize: 10, dnum: 3, type: \"Slashing\"}, {name: \"Tail\", dsize: 10, dnum: 3, type: \"Bludgeoning\"}, {name: \"Horns\", dsize: 8, dnum: 3, type: \"Piercing\"}], \r\n                plusattacks: [{name: \"Jaws\", dsize: 12, dnum: 1, type: \"Electricity\"}], \r\n                resistances: {electricity: 10}, \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"burrow\", label: \"Burrow\", value: \"20\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Brass\", \r\n                attacks: [{name: \"Jaws\", dsize: 8, dnum: 3, type: \"Piercing\"}, {name: \"Claw (agile)\", dsize: 10, dnum: 3, type: \"Slashing\"}, {name: \"Tail\", dsize: 10, dnum: 3, type: \"Bludgeoning\"}, {name: \"Spikes\", dsize: 8, dnum: 3, type: \"Piercing\"}], \r\n                plusattacks: [{name: \"Jaws\", dsize: 4, dnum: 2, type: \"Fire\"}], \r\n                resistances: {fire: 10}, \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"burrow\", label: \"Burrow\", value: \"20\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Bronze\", \r\n                attacks: [{name: \"Jaws\", dsize: 10, dnum: 2, type: \"Piercing\"}, {name: \"Claw (agile)\", dsize: 10, dnum: 3, type: \"Slashing\"}, {name: \"Tail\", dsize: 10, dnum: 3, type: \"Bludgeoning\"}, {name: \"Wing\", dsize: 8, dnum: 3, type: \"Slashing\"}], \r\n                plusattacks: [{name: \"Jaws\", dsize: 12, dnum: 1, type: \"Electricity\"}], \r\n                resistances: {electricity: 10}, \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"40\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Copper\", \r\n                attacks: [{name: \"Jaws\", dsize: 12, dnum: 2, type: \"Piercing\"}, {name: \"Claw (agile)\", dsize: 10, dnum: 3, type: \"Slashing\"}, {name: \"Tail\", dsize: 10, dnum: 3, type: \"Bludgeoning\"}, {name: \"Wing\", dsize: 8, dnum: 3, type: \"Bludgeoning\"}], \r\n                plusattacks: [{name: \"Jaws\", dsize: 6, dnum: 2, type: \"Acid\"}], \r\n                resistances: {acid: 10}, \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"climb\", label: \"Climb\", value: \"25\", exceptions: \"on stone only\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Gold\", \r\n                attacks: [{name: \"Jaws\", dsize: 12, dnum: 2, type: \"Piercing\"}, {name: \"Claw (agile)\", dsize: 6, dnum: 4, type: \"Slashing\"}, {name: \"Tail\", dsize: 10, dnum: 3, type: \"Bludgeoning\"}, {name: \"Horns\", dsize: 8, dnum: 3, type: \"Piercing\"}], \r\n                plusattacks: [{name: \"Jaws\", dsize: 6, dnum: 2, type: \"Fire\"}], \r\n                resistances: {fire: 10}, \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"40\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Green\", \r\n                attacks: [{name: \"Jaws\", dsize: 12, dnum: 2, type: \"Piercing\"}, {name: \"Claw (agile)\", dsize: 10, dnum: 3, type: \"Slashing\"}, {name: \"Tail\", dsize: 10, dnum: 3, type: \"Bludgeoning\"}, {name: \"Horns\", dsize: 8, dnum: 3, type: \"Piercing\"}], \r\n                plusattacks: [{name: \"Jaws\", dsize: 6, dnum: 2, type: \"Poison\"}], \r\n                resistances: {poison: 10}, \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"40\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Red\", \r\n                attacks: [{name: \"Jaws\", dsize: 12, dnum: 2, type: \"Piercing\"}, {name: \"Claw (agile)\", dsize: 6, dnum: 4, type: \"Slashing\"}, {name: \"Tail\", dsize: 10, dnum: 3, type: \"Bludgeoning\"}, {name: \"Wing\", dsize: 8, dnum: 3, type: \"Bludgeoning\"}], \r\n                plusattacks: [{name: \"Jaws\", dsize: 6, dnum: 2, type: \"Fire\"}], \r\n                resistances: {fire: 10}, \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Silver\", \r\n                attacks: [{name: \"Jaws\", dsize: 12, dnum: 2, type: \"Piercing\"}, {name: \"Claw (agile)\", dsize: 10, dnum: 3, type: \"Slashing\"}, {name: \"Tail\", dsize: 10, dnum: 3, type: \"Bludgeoning\"}], \r\n                plusattacks: [{name: \"Jaws\", dsize: 6, dnum: 2, type: \"Cold\"}], \r\n                resistances: {cold: 10}, \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"White\", \r\n                attacks: [{name: \"Jaws\", dsize: 6, dnum: 3, type: \"Piercing\"}, {name: \"Claw (agile)\", dsize: 10, dnum: 3, type: \"Slashing\"}, {name: \"Tail\", dsize: 10, dnum: 3, type: \"Bludgeoning\"}], \r\n                plusattacks: [{name: \"Jaws\", dsize: 6, dnum: 2, type: \"Cold\"}], \r\n                resistances: {cold: 10}, \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"climb\", label: \"Climb\", value: \"25\", exceptions: \"on ice only\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\r\n            },\r\n        ]\r\n    },\r\n\r\n    {\r\n        group: \"Monstrosity Shape\",\r\n        class: \"monstrosityShape\",\r\n        forms: [ \r\n            {\r\n                name: \"Phoenix\", \r\n                attacks: [{name: \"Beak\", dsize: 6, dnum: 2, type: \"Piercing plus 2d4 persistent Fire\", bonus: 12}, {name: \"Talon (agile)\", dsize: 8, dnum: 2, type: \"Slashing\", bonus: 12}], \r\n                plusattacks: [{name: \"Beak\", dsize: 4, dnum: 2, type: \"Fire\"}], \r\n                extraFeat: \"Soaring Shape\", \r\n                speed: {value: 30, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"90\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Purple Worm\", \r\n                attacks: [{name: \"Jaws\", dsize: 12, dnum: 2, type: \"Piercing\", bonus: 20}, {name: \"Stinger (agile)\", dsize: 8, dnum: 2, type: \"Piercing plus 2d6 persistent Poison\", bonus: 15}, {name: \"Body\", dsize: 8, dnum: 2, type: \"Bludgeoning\", bonus: 20}], \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"burrow\", label: \"Burrow\", value: \"30\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"20\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Sea Serpent\", \r\n                attacks: [{name: \"Jaws\", dsize: 12, dnum: 2, type: \"Piercing\", bonus: 20}, {name: \"Tail\", dsize: 8, dnum: 2, type: \"Bludgeoning\", bonus: 20}], \r\n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"swim\", label: \"Swim\", value: \"90\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            }, \r\n        ]\r\n    },\r\n\r\n    {\r\n        group: \"True Shapeshifter\",\r\n        class: \"trueShapeshifter\",\r\n        forms: [ \r\n            {\r\n                name: \"Green Man\", \r\n                attacks: [{name: \"Vines\", dsize: 8, dnum: 6, type: \"Bludgeoning\", bonus: 12}, {name: \"Thorns\", dsize: 6, dnum: 6, type: \"Piercing\", bonus: 6}], \r\n                extraFeat: \"Plant Shape\", \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"40\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n                size: 1\r\n            },\r\n            {\r\n                name: \"Kaiju\", \r\n                attacks: [{name: \"Jaws\", dsize: 10, dnum: 6, type: \"Piercing\", bonus: 10}, {name: \"Claws (agile)\", dsize: 8, dnum: 6, type: \"Slashing\", bonus: 8}, {name: \"Foot (agile)\", dsize: 6, dnum: 6, type: \"Bludgeoning\", bonus: 10}], \r\n                resistances: {piercing: 5, bludgeoning: 5, slashing: 5}, \r\n                speed: {value: 50, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            }, \r\n        ]\r\n    }\r\n];\r\n\r\nlet scalingAttributes = { // for sizes, 1 is Medium, 2 is Large, 3 is Huge, 4 is Gargantuan\r\n    pestForm: // corresponds to the \"class\" of the formGroups above. Used to link the chosen form to the correct statistics for the level it's being cast at\r\n    [// Pest Form\r\n        {level: 1, mod: 0, ac: 15, temphp: 0, damage: 0, skills: {stealth: 10, acrobatics: 10}, size: 0.25},\r\n        {level: 4, mod: 0, ac: 15, temphp: 0, damage: 0, skills: {stealth: 10, acrobatics: 10}, size: 0.25, \r\n            speed: {value: 10, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"20\", exceptions: \"\"}]}\r\n        },\r\n    ],\r\n\r\n    animalForm:\r\n    [// Animal Forms\r\n        {level: 2, mod: 9, ac: 16, temphp: 5, damage: 1, skills: {athletics: 9}, size: 1},\r\n        {level: 3, mod: 14, ac: 17, temphp: 10, damage: 5, skills: {athletics: 14}, size: 1},\r\n        {level: 4, mod: 16, ac: 18, temphp: 15, damage: 9, skills: {athletics: 16}, size: 2},\r\n        {level: 5, mod: 18, ac: 18, temphp: 20, damage: 7, skills: {athletics: 20}, size: 3, double: true}\r\n    ],\r\n    \r\n    insectShape:\r\n    [// Insect Forms\r\n        {level: 3, mod: 13, ac: 18, temphp: 10, damage: 2, skills: {athletics: 13}, size: 1},\r\n        {level: 4, mod: 16, ac: 18, temphp: 15, damage: 6, skills: {athletics: 16}, size: 2},\r\n        {level: 5, mod: 18, ac: 18, temphp: 20, damage: 2, skills: {athletics: 20}, size: 3, double: true},\r\n    ],\r\n\r\n    soaringShape:\r\n    [// Soaring Forms\r\n        {level: 4, mod: 16, ac: 18, temphp: 5, damage: 5, skills: {acrobatics: 16}, size: 1},\r\n        {level: 5, mod: 18, ac: 18, temphp: 10, damage: 8, skills: {acrobatics: 20}, size: 2},\r\n        {level: 6, mod: 21, ac: 21, temphp: 15, damage: 4, skills: {acrobatics: 23}, size: 3, double: true},\r\n    ],\r\n\r\n    ferociousShape:\r\n    [// Ferocious Forms\r\n        {level: 4, mod: 16, ac: 18, temphp: 15, damage: 9, skills: {athletics: 18}, size: 2},\r\n        {level: 5, mod: 18, ac: 18, temphp: 20, damage: 6, skills: {athletics: 21}, size: 3, double: true},\r\n        {level: 7, mod: 25, ac: 21, temphp: 25, damage: 15, skills: {athletics: 25}, size: 4, double: true},\r\n    ],\r\n\r\n    elementalShape:\r\n    [// Elemental Forms\r\n        {level: 5, mod: 18, ac: 18, temphp: 10, damage: 9, skills: {athletics: 20, acrobatics: 20}, size: 1},\r\n        {level: 6, mod: 23, ac: 22, temphp: 15, damage: 13, skills: {athletics: 23, acrobatics: 20}, size: 2},\r\n        {level: 7, mod: 25, ac: 22, temphp: 20, damage: 11, skills: {athletics: 25, acrobatics: 20}, size: 3, double: true},\r\n    ],\r\n\r\n    plantShape:\r\n    [// Plant Forms\r\n        {level: 5, mod: 17, ac: 19, temphp: 12, damage: 11, skills: {athletics: 19}, size: 2},\r\n        {level: 6, mod: 21, ac: 22, temphp: 24, damage: 16, skills: {athletics: 22}, size: 3},\r\n    ],\r\n\r\n    dragonShape:\r\n    [// Dragon Forms\r\n        {level: 6, mod: 22, ac: 18, temphp: 10, damage: 6, skills: {athletics: 23}, size: 2},\r\n        {level: 8, mod: 28, ac: 21, temphp: 15, damage: 12, skills: {athletics: 28}, size: 3},\r\n    ],\r\n\r\n    monstrosityShape:\r\n    [// Monstrosity Forms\r\n        {level: 8, mod: 28, ac: 20, temphp: 20, skills: {athletics: 30}, size: 3},\r\n        {level: 9, mod: 31, ac: 22, temphp: 25, skills: {athletics: 33}, size: 3},\r\n    ],\r\n\r\n    trueShapeshifter:\r\n    [// True Shapeshifter form\r\n        {level: 10, mod: 34, ac: 25, temphp: 30, skills: {athletics: 36}, size: 4},\r\n    ]\r\n};\r\n\r\nlet skillRefs = {\r\n    acrobatics: \"acr\",\r\n    arcana: \"arc\",\r\n    athletics: \"ath\",\r\n    crafting: \"cra\",\r\n    deception: \"dec\",\r\n    diplomacy: \"dip\",\r\n    intimidation: \"itm\",\r\n    medicine: \"med\",\r\n    nature: \"nat\",\r\n    occultism: \"occ\",\r\n    performance: \"prf\",\r\n    religion: \"rel\",\r\n    society: \"soc\",\r\n    stealth: \"ste\",\r\n    survival: \"sur\",\r\n    thievery: \"thi\",\r\n};\r\n\r\n// ------------------------------------------------------------------\r\n// DECLARE VARIABLES\r\n// ------------------------------------------------------------------\r\n\r\n// Dialog variable\r\nlet content = \"\";\r\n\r\n// For token size adjustment\r\nlet width = 1;\r\nlet height = 1;\r\n\r\n// For stats adjustments\r\nlet formValue = 0;\r\nlet origValue = 0;\r\nlet origSpeeds = {};\r\nlet origSenses = [];\r\nlet bypassTo = \"\";\r\n\r\nconst tok = canvas.tokens.controlled[0]\r\nconst caster = tok.actor;\r\nif (!tok) {\r\n    ui.notifications.error(\"Please select a token\"); \r\n    return; \r\n}\r\nlet tempHP = caster.data.data.attributes.hp.temp;\r\nif (!tempHP) {\r\n    tempHP = 0;\r\n}\r\nlet formData = caster.getFlag(\"world\", \"ws_formData\");\r\nlet isSpellShaped = caster.getFlag(\"world\", \"ss_formData\");\r\nlet levelAttributes;\r\nlet heightenedLevel = Math.ceil((caster.data.data.details.level.value) / 2); \r\n\r\n\r\n// -------------------------------------------------------------------\r\n// DECLARE FUNCTIONS\r\n// -------------------------------------------------------------------\r\n\r\nasync function removeCustomMods() {\r\n    let customMods = Object.keys(caster.data.data.customModifiers)\r\n    for (let element of customMods) {\r\n        for (let mod of caster.data.data.customModifiers[element]) {\r\n            if (mod.name.includes(\"WSForm\")) {\r\n                await removeMod(element, mod.name)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n\r\nasync function removeMod(type, label) {\r\n    if (caster.data.data.customModifiers[type]) {\r\n        await caster.removeCustomModifier(`${type}`, label);\r\n    }\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n\r\nasync function reset(){\r\n    // back to default image, if we changed it\r\n    let img = caster.getFlag(\"world\", \"ws_origImg\");\r\n    if (img) {\r\n        await tok.update({ img });\r\n        await caster.update({ \"token.img\" : img })\r\n    }\r\n\r\n    // This resets the token size. If you use small-size tokens in your game, delete the '//'s \r\n    // preceding the next complete 'if' statement. This will ensure Small PCs revert to their \r\n    // correct size rather than becoming Medium.\r\n    \r\n    // if (caster.data.data.traits.size.value === \"med\"){\r\n    await setSize(1);\r\n    // } else if (caster.data.data.traits.size.value === \"sm\"){\r\n    //    await setSize(0.5);\r\n    // };\r\n\r\n    // remove all form attributes from token\r\n    await caster.unsetFlag(\"world\", \"ws_formData\")\r\n    await caster.unsetFlag(\"world\", \"ws_levelAttributes\")\r\n\r\n    // Remove any resistances/weaknesses that were given by transformation\r\n    let filterOut = caster.data.data.traits.dv.filter(element => \r\n        !element.label.includes(\"WSForm\"))\r\n    await caster.update({ \"data.traits.dv\" : filterOut });\r\n    filterOut = caster.data.data.traits.dr.filter(element => \r\n        !element.label.includes(\"WSForm\"))\r\n    await caster.update({ \"data.traits.dr\" : filterOut });\r\n\r\n    // reset Speeds and Senses to normal\r\n    await resetSenses();\r\n    await resetSpeeds();\r\n\r\n    // if tempHP was changed, remove tempHP\r\n    await resetTempHP();\r\n\r\n    // remove any custom bonuses applied from the transformation\r\n    await removeCustomMods();\r\n};\r\n\r\n// -------------------------------------------------------------------\r\n\r\nasync function resetTempHP() {\r\n    let oldTempHP = await caster.getFlag(\"world\", \"ws_tempHPChanged\")\r\n    if (oldTempHP >= 0) {\r\n        await caster.unsetFlag(\"world\", \"ws_tempHPChanged\")\r\n        await caster.update({ \"data.attributes.hp.temp\": oldTempHP });\r\n    }  \r\n}\r\n\r\n// -------------------------------------------------------------------\r\n\r\n// Apply wide ranging bonuses gained from having specific wild shape feats\r\nasync function featCheck(formData, formType){\r\n    if (wsFeats.includes(\"Elemental Shape\") && formType !== \"elementalShape\") {\r\n        if (!formData.resistances) {\r\n            formData.resistances = {fire: 5};\r\n        } else if (!formData.resistances.fire || (formData.resistances.fire && (formData.resistances.fire < 5))) {\r\n            formData.resistances.fire = 5\r\n        }\r\n    }\r\n\r\n    if (wsFeats.includes(\"Plant Shape\") && formType !== \"plantShape\") {\r\n        if (!formData.resistances) {\r\n            formData.resistances = {poison: 5};\r\n        } else if (!formData.resistances.poison || (formData.resistances.poison && (formData.resistances.poison < 5))) {\r\n            formData.resistances.poison = 5\r\n        }\r\n    }\r\n\r\n    if (wsFeats.includes(\"Dragon Shape\") && formType !== \"dragonShape\") {\r\n        dragonResistance();\r\n    }\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n\r\n// If the form has resistances or weaknesses, add them\r\nasync function applyResistances(formData) {\r\n    if (formData.resistances) {\r\n        let resistances = formData.resistances;\r\n        for (let type in resistances) {\r\n            if (resistances.hasOwnProperty(type)) {\r\n                caster.data.data.traits.dr.push({\r\n                    type: type, \r\n                    label: `WSForm ${type}`, \r\n                    value: resistances[type], \r\n                    exceptions: \"\"\r\n                })\r\n            }\r\n        }\r\n        // create a copy of the resistances array and set resistances to that, so\r\n        // it is preserved when game is reloaded (owing to pass by reference)\r\n        let newResistances = JSON.parse(JSON.stringify(caster.data.data.traits.dr))\r\n        await caster.update({ \"data.traits.dr\" : newResistances })\r\n    }\r\n\r\n    if (formData.weaknesses) {\r\n        let weaknesses = formData.weaknesses;\r\n        for (let type in weaknesses) {\r\n            if (weaknesses.hasOwnProperty(type)) {\r\n                caster.data.data.traits.dv.push({\r\n                    type: type, \r\n                    label: `WSForm ${type}`, \r\n                    value: weaknesses[type], \r\n                    exceptions: \"\"\r\n                })\r\n            }\r\n        }\r\n        let newWeaknesses = JSON.parse(JSON.stringify(caster.data.data.traits.dv))\r\n        await caster.update({ \"data.traits.dv\" : newWeaknesses })\r\n    }\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n\r\nasync function resetSpeeds() {\r\n    let revert = caster.getFlag(\"world\", \"ws_origSpeeds\")\r\n    await caster.update({ \"data.attributes.speed\" : revert})\r\n    await caster.unsetFlag(\"world\", \"ws_origSpeeds\")\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n\r\nasync function resetSenses() {\r\n    let revert = caster.getFlag(\"world\", \"ws_origSenses\")\r\n    await caster.update({ \"data.traits.senses\" : revert})\r\n    await caster.unsetFlag(\"world\", \"ws_origSenses\")\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n\r\n// scales up token depending on the provided size of the new form\r\nasync function setSize(newSize){ \r\n    if (formData && formData.size) {\r\n        tok.update({ width: formData.size, height: formData.size });\r\n        await caster.update({ \"token.width\": formData.size, \"token.height\": formData.size });\r\n    } else {\r\n        tok.update({ width: newSize, height: newSize });\r\n        await caster.update({ \"token.width\" : newSize, \"token.height\" : newSize})\r\n    }\r\n};\r\n\r\n// -------------------------------------------------------------------\r\n\r\n// if the form level's skill bonuses are greater than the character's, use those\r\n// apply any feat bonuses if applicable\r\nasync function skillBonus(levelSkills, baseSkills) {\r\n    let skills = Object.keys(levelSkills)\r\n    for (let skill of skills) {\r\n        if (bypassTo === \"athElemental\") { skill = \"athletics\"; }\r\n        else if (bypassTo === \"acrElemental\") { skill = \"acrobatics\" }\r\n        let abbr = skillRefs[skill];\r\n        origValue = baseSkills[abbr].value\r\n        formValue = levelSkills[skill]\r\n        let label = (`${skill}`).charAt(0).toUpperCase() + (`${skill}`).slice(1);\r\n        if (formValue > origValue) {\r\n            const formBonus = formValue - origValue;\r\n            await caster.addCustomModifier(skill, `WSForm ${label} Bonus`, formBonus, \"untyped\")\r\n        }\r\n        if (wsFeats.includes(\"Ferocious Shape\") && skill === \"athletics\") {\r\n            await caster.addCustomModifier(\"athletics\", \"WSForm Ferocious Bonus\", 1, \"status\");\r\n        }\r\n        if (wsFeats.includes(\"Soaring Shape\") && skill === \"acrobatics\") {\r\n            await caster.addCustomModifier(\"acrobatics\", \"WSForm Soaring Bonus\", 1, \"status\");\r\n        }\r\n    }\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n\r\n// if the druid has Dragon Shape, this will pop up a dialog to choose your resistance when transforming\r\n// into a non-Dragon form\r\nasync function dragonResistance() {\r\n    let content2 = \"\";\r\n    content2 += `<p><label for=\"resistance\">Choose your resistance:</label>\r\n                        <select name=\"resistance\" id=\"resistance\">\r\n                        <option value=\"acid\">Acid</option>\r\n                        <option value=\"cold\">Cold</option>\r\n                        <option value=\"electricity\">Electricity</option>\r\n                        <option value=\"fire\">Fire</option>\r\n                        <option value=\"poison\">Poison</option></select></p>`\r\n    new Dialog({\r\n        title: \"Choose Resistance\",\r\n        content: content2,\r\n        buttons: {\r\n            select: {\r\n                icon: \"<i class='fas fa-check'></i>\",\r\n                label: \"Select\",\r\n                callback: async (html) => {\r\n                    let type = html.find(\"#resistance\")[0].value;\r\n                    if (!formData.resistances) {\r\n                        formData.resistances = {[type]: 5};\r\n                    } else if (!formData.resistances[type] || \r\n                        ((formData.resistances[type]) && (formData.resistances[type]<5))) {\r\n                        formData.resistances[type] = 5\r\n                    }\r\n                    await applyResistances(formData);\r\n                }\r\n            },\r\n            cancel: {\r\n                icon: \"<i class='fas fa-times'></i>\",\r\n                label: \"Cancel\"\r\n            }\r\n        }\r\n    }).render(true);\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n\r\n// Change the token's speeds to the form's\r\nasync function changeSpeeds() {\r\n    // if there are any changes to speed at this level of the spell, use those\r\n    if (levelAttributes.speed) {\r\n        await caster.update({ \"data.attributes.speed\" : levelAttributes.speed })\r\n    } else {  // otherwise use the form's base speeds\r\n        await caster.update({ \"data.attributes.speed\" : formData.speed })\r\n    }\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n\r\n// Change the token's senses to the form's\r\nasync function setSenses() {\r\n    // if there are any changes to senses at this level of the spell, use those\r\n    if (levelAttributes.senses) {\r\n        await caster.update({ \"data.traits.senses\" : levelAttributes.senses })\r\n    } else { // otherwise use the form's base senses\r\n        await caster.update({ \"data.traits.senses\" : formData.senses })\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------> Main Transform Function\r\n\r\nasync function transform(html) {\r\n        if (!formData) { // if actor isn't already transformed ->\r\n            let castingLevel = html.find(\"#level\")[0].value;\r\n            let formType = html.find('#forms')[0].selectedOptions[0].className;\r\n            let actualForm = html.find('#forms')[0].value;\r\n\r\n            // Set up level variables\r\n            let maxLevel = scalingAttributes[formType][scalingAttributes[formType].length - 1].level;\r\n            let minLevel = scalingAttributes[formType][0].level\r\n            if (castingLevel === \"Auto\") {\r\n                // if heightened level is lower than the min level of transformation, you cannot transform\r\n                if (heightenedLevel < minLevel) { \r\n                    ui.notifications.error(\"You are not a high enough level to transform into that form.\"); \r\n                    return;\r\n                }\r\n            } else {\r\n                heightenedLevel = parseInt(castingLevel)\r\n                if (heightenedLevel < minLevel) { \r\n                    ui.notifications.error(\"You cannot transform into that form at the selected spell level.\"); \r\n                    return;\r\n                }\r\n            }\r\n             \r\n            // add Form Attributes to token for reference\r\n            for (let group of formGroups) {\r\n                // find the class in formGroups that matches the formType from the selected option in the dialog\r\n                if (group.class === formType) { \r\n                    formData = (group.forms).find(element => element.name === actualForm);\r\n                    await caster.setFlag(\"world\", \"ws_formData\", formData);\r\n                }\r\n            }\r\n\r\n            if (heightenedLevel > maxLevel) { // if heightened level exceeds max level of spell, set it to work at max level\r\n                heightenedLevel = maxLevel;\r\n            };\r\n            \r\n            // add the scaling attributes of our selected form to our token for reference\r\n            // if the spell is being cast at less than max level, but not at a level for which there is a specific entry,\r\n            // find the next lowest level and cast it at that level\r\n            for (let i = 0; i <= heightenedLevel; i++) {\r\n                if (!levelAttributes) {\r\n                    scalingAttributes[formType].forEach(element => {\r\n                        if ((element.level + i) === heightenedLevel) {\r\n                            levelAttributes = element;\r\n                            caster.setFlag(\"world\", \"ws_levelAttributes\", levelAttributes)\r\n                            return;\r\n                        }\r\n                    })\r\n\r\n                }\r\n            }\r\n            \r\n            // if there are any form-specific skills, set those first\r\n            if (formData.skills) {\r\n                let formSkills = Object.keys(formData.skills)\r\n                for (let i = 0; i < formSkills.length; i++) {\r\n                    let modSkill = (Object.values(caster.data.data.skills)).find(element => element.name === formSkills[i])\r\n                    let modValue;\r\n                    if (formData.skills[formSkills[i]] !== modSkill.value) {\r\n                        modValue = formData.skills[formSkills[i]] - modSkill.value\r\n                    }\r\n                    await caster.addCustomModifier(modSkill.name, \"WSForm Value\", modValue, \"untyped\");\r\n                }\r\n            }\r\n\r\n            await featCheck(formData, formType);\r\n            await applyResistances(formData)\r\n\r\n            // if Form Athletics/Acrobatics bonus is greater than base Athletics/Acrobatics, add\r\n            // Form Bonus to Athletics/Acrobatics value\r\n            if (formData.name == \"Air\" || formData.name == \"Fire\") {\r\n                bypassTo = \"acrElemental\"\r\n            } else if (formData.name == \"Earth\" || formData.name == \"Water\") {\r\n                bypassTo = \"athElemental\"\r\n            }\r\n            await skillBonus(levelAttributes.skills, caster.data.data.skills);\r\n\r\n            // if Form AC bonus is greater than base AC, add Form Bonus to AC value\r\n            formValue = levelAttributes.ac + caster.data.data.details.level.value;\r\n            origValue = caster.data.data.attributes.ac.value;\r\n            if (formValue > origValue) {\r\n                const formACBonus = (formValue - origValue);\r\n                await caster.addCustomModifier(\"ac\", \"WSForm Bonus AC\", formACBonus, \"untyped\");\r\n            }\r\n\r\n            // if Form Attack Mod is less than Unarmed Attack mod of the actor, add a +2 to Unarmed\r\n            // Attack mod and let the form attacks use that instead\r\n            formValue = levelAttributes.mod\r\n            if ((caster.data.data.actions).find(action => action.name === \"Handwraps of Mighty Blows\")) {\r\n                origValue = (caster.data.data.actions).find(action => action.name === \"Handwraps of Mighty Blows\").totalModifier\r\n            } else {\r\n                origValue = ((caster.data.data.actions).find(action => action.name === \"Fist\")).totalModifier\r\n            }\r\n            if (formValue < (origValue + 2)) {\r\n                await caster.addCustomModifier(\"attack\", \"WSForm Bonus\", 2, \"status\");\r\n                levelAttributes.ownMod = (origValue + 2);\r\n                await caster.setFlag(\"world\", \"ws_levelAttributes\", levelAttributes)\r\n            }\r\n\r\n            // rememeber original senses for reset\r\n            origSenses = JSON.parse(JSON.stringify(caster.data.data.traits.senses));\r\n            await caster.setFlag(\"world\", \"ws_origSenses\", origSenses);\r\n            await setSenses();\r\n\r\n            // remember original speed for reset\r\n            origSpeeds = JSON.parse(JSON.stringify(caster.data.data.attributes.speed));\r\n            await caster.setFlag(\"world\", \"ws_origSpeeds\", origSpeeds);\r\n            await changeSpeeds();\r\n\r\n            // add temp HP, if Form Temp HP value is greater than already extant temp HP value\r\n            if (!tempHP || (tempHP < levelAttributes.temphp)) {\r\n                await caster.setFlag(\"world\", \"ws_tempHPChanged\", tempHP)\r\n                let newTempHP = levelAttributes.temphp\r\n                await caster.update({ \"data.attributes.hp.temp\": newTempHP });\r\n            };\r\n\r\n            // Change image. Make sure your images are labeled with the form name (w/ correct capitalization)\r\n            // at the end of your token name. Comment out the next three if you don't want the image to change\r\n            let origImg = tok.data.img;\r\n            await caster.setFlag(\"world\", \"ws_origImg\", origImg)\r\n            let img = origImg.slice(0, -4) + (formData.name) + \".png\";\r\n            await tok.update({ img });\r\n            await caster.update({ \"token.img\" : img})\r\n\r\n            // Change size\r\n            if (formData.size) {\r\n                await setSize(formData.size);\r\n            } else {\r\n                await setSize(levelAttributes.size);\r\n            }\r\n\r\n        } else {\r\n            ui.notifications.error(\"Please return to normal form before transforming again.\"); \r\n            return;\r\n        }\r\n}\r\n\r\n// --------------------------------------------------------------------------\r\n// INIT\r\n// --------------------------------------------------------------------------\r\n\r\nif (caster.data.type !== \"character\") {\r\n    ui.notifications.error(\"Please select a player character token.\"); \r\n    return; \r\n}\r\n\r\nif (isSpellShaped) {\r\n    ui.notifications.error(\"Please use the Spell Shape macro\"); \r\n    return;\r\n}\r\n\r\n// Populate the featNames array with the name of the required feat for each formGroup e.g \"Insect Shape\" or \"Dragon Shape\".\r\nlet featNames = [];\r\nformGroups.forEach(group => featNames.push(group.group)) \r\n\r\n// From all the actor's feats, find the ones that match the names of the Wild Shape feats and put them in the wsFeats array - this will determine what forms they have access to in the dropdown.\r\nlet wsFeats = [];\r\nconst allFeats = (caster.data.items).filter(item => item.type === \"feat\") \r\nfor (let i=0; i<allFeats.length; i++) {\r\n    let findFeat = featNames.filter(name => name.includes(allFeats[i].name))\r\n    wsFeats = wsFeats.concat(findFeat);\r\n}\r\n\r\n// Populate dropdown based on what Wild Shape feats the actor has, and divide them by group\r\ncontent += `<label for=\"forms\">Choose your form</label>\r\n<select name=\"forms\" id=\"forms\">`\r\nfor (let formGroup of formGroups) {\r\n    if (wsFeats.includes(formGroup.group)) {\r\n        content += `<optgroup label=\"${formGroup.group}\">`\r\n        formGroup.forms.forEach(form => {\r\n            if ( !form.extraFeat || wsFeats.includes(form.extraFeat) ) {\r\n                content += `<option value=\"${form.name}\" class=\"${formGroup.class}\">${form.name}</option>`\r\n            }\r\n        })\r\n        content += `</optgroup>`\r\n    };\r\n}\r\ncontent += `</select>`\r\n\r\ncontent += `<p><label for=\"level\">What level are you casting at?</label>\r\n<select name=\"level\" id=\"level\">\r\n<option value=\"Auto\" selected>Auto</option>`\r\nfor (let i = 1; i <= heightenedLevel; i++){\r\n    content += `<option value=${i}>${i}</option>`\r\n}\r\ncontent += `</select>`\r\n\r\n// Generate dialog\r\n\r\nnew Dialog({\r\n    title: \"Wild Shape\",\r\n    content: content,\r\n    buttons: {\r\n      morph: {\r\n        icon: \"<i class='fas fa-check'></i>\",\r\n        label: \"Transform!\",\r\n        callback: (html) => transform(html),\r\n      },\r\n      revert: {\r\n          icon: \"<i class='fas fa-undo'></i>\",\r\n          label: \"Revert\",\r\n          callback: () => reset(),\r\n      },\r\n      cancel: {\r\n        icon: \"<i class='fas fa-times'></i>\",\r\n        label: \"Cancel\",\r\n      },\r\n    },\r\n}).render(true);","author":"TKPF0VhpkrvAyBOK","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"AHRRKs4BcuU1gTym"}
{"_id":"RJC9Cbzc8mkHOh7j","name":"Spell Shape","permission":{"default":0,"TKPF0VhpkrvAyBOK":3},"type":"script","flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"// ----------------------------------------------------------------\r\n// FORM STATS. ADJUST THESE FOR DIFFERENT SPELLS\r\n//\r\n\r\nlet formGroups = [ // contains Attack info for the forms\r\n    {\r\n        group: \"Pest Form\", // Doubles as the Feat Name and the Heading under which the form options are displayed in the selection menu\r\n        class: \"pestForm\", // Used to link to the correct Scaling Attributes group\r\n        forms: [\r\n            {\r\n                name: \"Pest\",\r\n                attacks: [],\r\n                weaknesses: {piercing: 5, bludgeoning: 5, slashing: 5},\r\n                speed: {value: 10, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\",label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\r\n                skills: {athletics: -4},\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        group: \"Animal Form\", // Doubles as the Feat Name and the Heading under which the form options are displayed in the selection menu\r\n        class: \"wildShape\", // Used to link to the correct Scaling Attributes group\r\n        forms: [\r\n            {\r\n                name: \"Ape\", \r\n                attacks: [{name: \"Fist\", dsize: 6, dnum: 2, type: \"Bludgeoning\"}], \r\n                speed: {value: 30, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"20\", exceptions: \"\"}]}, \r\n                senses: [{type: \"lowLightVision\",label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\r\n            }, \r\n            {\r\n                name: \"Bear\", \r\n                attacks: [{name: \"Jaws\", dsize: 8, dnum: 2, type: \"Piercing\"},{name: \"Claw (agile)\", dsize: 8, dnum: 1, type: \"Slashing\"}],\r\n                speed: {value: 30, special: \"\", otherSpeeds: []}, \r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\r\n            }, \r\n            {\r\n                name: \"Bull\", \r\n                attacks: [{name: \"Horn\", dsize: 8, dnum: 2, type: \"Piercing\"}], \r\n                speed: {value: 30, special: \"\", otherSpeeds: []}, \r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\r\n            },\r\n            {\r\n                name: \"Canine\", \r\n                attacks: [{name: \"Jaws\", dsize: 8, dnum: 2, type: \"Piercing\"}],\r\n                speed: {value: 40, special: \"\", otherSpeeds: []}, \r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\r\n            },\r\n            {\r\n                name: \"Cat\", \r\n                attacks: [{name: \"Jaws\", dsize: 6, dnum: 2, type: \"Piercing\"}, {name: \"Claw (agile)\", dsize: 10, dnum: 1, type: \"Slashing\"}], \r\n                speed: {value: 40, special: \"\", otherSpeeds: []}, \r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\r\n            },\r\n            {\r\n                name: \"Deer\", \r\n                attacks: [{name: \"Antler\", dsize: 6, dnum: 2, type: \"Piercing\"}], \r\n                speed: {value: 50, special: \"\", otherSpeeds: []}, \r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\r\n            },\r\n            {\r\n                name: \"Frog\", \r\n                attacks: [{name: \"Jaws\", dsize: 6, dnum: 2, type: \"Bludgeoning\"}, {name: \"Tongue\", dsize: 4, dnum: 2, type: \"Bludgeoning\"}], \r\n                speed: {value: 25, special: \"\", otherSpeeds: [{type: \"swim\", label: \"Swim\", value: \"25\", exceptions: \"\"}]}, \r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\r\n            },\r\n            {\r\n                name: \"Shark\", \r\n                attacks: [{name: \"Jaws\", dsize: 8, dnum: 2, type: \"Piercing\"}], \r\n                speed: {value: 0, special: \"\", otherSpeeds: [{type: \"swim\", label: \"Swim\", value: \"35\", exceptions: \"\"}]}, \r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\r\n            },\r\n            {\r\n                name: \"Snake\", \r\n                attacks: [{name: \"Fangs\", dsize: 4, dnum: 2, type: \"Piercing\"}], \r\n                plusattacks: [{name: \"Fangs\", dsize: 6, dnum: 1, type: \"Poison\"}], // plusattacks add additional damage to the same-name primary attack. Can support multiple different instances of additional damage.\r\n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"20\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"20\", exceptions: \"\"}]}, \r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\r\n            } \r\n        ]\r\n    },\r\n    \r\n    {\r\n        group: \"Insect Form\",\r\n        class: \"insectShape\",\r\n        forms: [\r\n            {\r\n                name: \"Ant\", \r\n                attacks: [{name: \"Mandibles\", dsize: 6, dnum: 2, type: \"Bludgeoning\"}], \r\n                speed: {value: 30, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"30\", exceptions: \"\"}]},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Beetle\",\r\n                attacks: [{name: \"Mandibles\", dsize: 10, dnum: 2, type: \"Bludgeoning\"}], \r\n                speed: {value: 25, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Centipede\", \r\n                attacks: [{name: \"Mandibles\", dsize: 8, dnum: 1, type: \"Piercing plus 1d4 persistent Poison\"}], \r\n                speed: {value: 25, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"25\", exceptions: \"\"}]},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Mantis\", \r\n                attacks: [{name: \"Foreleg\", dsize: 8, dnum: 2, type: \"Bludgeoning\"}], \r\n                speed: {value: 40, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Scorpion\", \r\n                attacks: [{name: \"Stinger\", dsize: 8, dnum: 1, type: \"Piercing plus 1d4 persistent Poison\"}, {name: \"Pincer (agile)\", dsize: 6, dnum: 1, type: \"Bludgeoning\"}], \r\n                speed: {value: 40, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"tremorsense\", label: \"Imprecise Tremorsense\", value: \"60\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Spider\", \r\n                attacks: [{name: \"Fangs\", dsize: 6, dnum: 1, type: \"Piercing plus 1d4 persistent Poison\"}, {name: \"Web\", dsize: 1, dnum: 0, type: \"None\"}], \r\n                speed: {value: 25, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"25\", exceptions: \"\"}]},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n        ]\r\n    }, \r\n\r\n    { \r\n        group: \"Aerial Form\",\r\n        class: \"soaringShape\",\r\n        forms: [\r\n            {\r\n                name: \"Bat\", \r\n                attacks: [{name: \"Fangs\", dsize: 8, dnum: 2, type: \"Piercing\"}, {name: \"Wing (agile)\", dsize: 6, dnum: 2, type: \"Bludgeoning\"}], \r\n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"30\", exceptions: \"\"}]},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"echolocation\", label: \"Precise Echolocation\", value: \"40\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Bird\", \r\n                attacks: [{name: \"Beak\", dsize: 8, dnum: 2, type: \"Piercing\"}, {name: \"Talon (agile)\", dsize: 10, dnum: 1, type: \"Slashing\"}], \r\n                speed: {value: 10, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"50\", exceptions: \"\"}]},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Pterosaur\", \r\n                attacks: [{name: \"Beak\", dsize: 6, dnum: 3, type: \"Piercing\"}], \r\n                extraFeat: \"Ferocious Shape\", \r\n                speed: {value: 10, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"40\", exceptions: \"\"}]},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Wasp\", \r\n                attacks: [{name: \"Stinger\", dsize: 8, dnum: 1, type: \"Piercing plus 1d6 persistent Poison\"}], \r\n                extraFeat: \"Insect Shape\", \r\n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"40\", exceptions: \"\"}]},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n        ]\r\n    },\r\n\r\n    { \r\n        group: \"Dinosaur Form\",\r\n        class: \"ferociousShape\",\r\n        forms: [\r\n            {\r\n                name: \"Ankylosaurus\", \r\n                attacks: [{name: \"Tail\", dsize: 6, dnum: 2, type: \"Bludgeoning\"}, {name: \"Foot\", dsize: 6, dnum: 2, type: \"Bludgeoning\"}], \r\n                speed: {value: 25, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Brontosaurus\", \r\n                attacks: [{name: \"Tail\", dsize: 6, dnum: 2, type: \"Bludgeoning\"}, {name: \"Foot\", dsize: 8, dnum: 2, type: \"Bludgeoning\"}], \r\n                speed: {value: 25, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Deinonychus\", \r\n                attacks: [{name: \"Talon (agile)\", dsize: 4, dnum: 2, type: \"Piercing plus 1 persistent Bleed\"}, {name: \"Jaws\", dsize: 10, dnum: 1, type: \"Piercing\"}], \r\n                speed: {value: 40, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Stegosaurus\", \r\n                attacks: [{name: \"Tail\", dsize: 8, dnum: 2, type: \"Piercing\"}], \r\n                speed: {value: 30, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Triceratops\", \r\n                attacks: [{name: \"Horn\", dsize: 8, dnum: 2, type: \"Piercing plus 1d6 persistent Bleed on a Crit\"}, {name: \"Foot\", dsize: 6, dnum: 2, type: \"Bludgeoning\"}], \r\n                speed: {value: 30, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Tyrannosaurus\", \r\n                attacks: [{name: \"Jaws\", dsize: 12, dnum: 1, type: \"Piercing\"}, {name: \"Tail\", dsize: 10, dnum: 1, type: \"Bludgeoning\"}], \r\n                speed: {value: 30, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\r\n            },\r\n        ]\r\n    },\r\n\r\n    { \r\n        group: \"Elemental Form\",\r\n        class: \"elementalShape\",\r\n        forms: [\r\n            {\r\n                name: \"Air\", \r\n                attacks: [{name: \"Gust\", dsize: 4, dnum: 1, type: \"Bludgeoning\"}], \r\n                speed: {value: 0, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"80\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Earth\", \r\n                attacks: [{name: \"Fist\", dsize: 10, dnum: 2, type: \"Bludgeoning\"}], \r\n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"burrow\", label: \"Burrow\", value: \"20\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Fire\", \r\n                attacks: [{name: \"Tendril\", dsize: 8, dnum: 1, type: \"Fire plus 1d4 persistent Fire\"}], \r\n                resistances: {fire: 10}, \r\n                weaknesses: {cold: 5, water: 5}, \r\n                speed: {value: 50, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Water\", \r\n                attacks: [{name: \"Wave\", dsize: 12, dnum: 1, type: \"Bludgeoning\"}], \r\n                resistances: {fire: 5}, \r\n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"swim\", label: \"Swim\", value: \"60\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n        ]\r\n    },\r\n\r\n    { \r\n        group: \"Plant Form\",\r\n        class: \"plantShape\",\r\n        forms: [\r\n            {\r\n                name: \"Arboreal\", \r\n                attacks: [{name: \"Branch\", dsize: 10, dnum: 2, type: \"Bludgeoning\"}, {name: \"Foot\", dsize: 8, dnum: 2, type: \"Bludgeoning\"}], \r\n                resistances: {poison: 10}, \r\n                speed: {value: 30, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Flytrap\", \r\n                attacks: [{name: \"Leaf\", dsize: 8, dnum: 2, type: \"Piercing\"}], \r\n                resistances: {poison: 10, acid: 10}, \r\n                speed: {value: 15, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Shambler\", \r\n                attacks: [{name: \"Vine\", dsize: 8, dnum: 2, type: \"Slashing\"}], \r\n                resistances: {poison: 10, electricity: 10}, \r\n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"swim\", label: \"Swim\", value: \"20\", exceptions: \"\"}]},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n        ]\r\n    },\r\n\r\n    { \r\n        group: \"Dragon Form\",\r\n        class: \"dragonShape\",\r\n        forms: [\r\n            {\r\n                name: \"Black\", \r\n                attacks: [{name: \"Jaws\", dsize: 12, dnum: 2, type: \"Piercing\"}, {name: \"Claw (agile)\", dsize: 10, dnum: 3, type: \"Slashing\"}, {name: \"Tail\", dsize: 10, dnum: 3, type: \"Bludgeoning\"}, {name: \"Horns\", dsize: 8, dnum: 3, type: \"Piercing\"}], \r\n                plusattacks: [{name: \"Jaws\", dsize: 6, dnum: 2, type: \"Acid\"}], \r\n                resistances: {acid: 10}, \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"60\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Blue\", \r\n                attacks: [{name: \"Jaws\", dsize: 10, dnum: 2, type: \"Piercing\"}, {name: \"Claw (agile)\", dsize: 10, dnum: 3, type: \"Slashing\"}, {name: \"Tail\", dsize: 10, dnum: 3, type: \"Bludgeoning\"}, {name: \"Horns\", dsize: 8, dnum: 3, type: \"Piercing\"}], \r\n                plusattacks: [{name: \"Jaws\", dsize: 12, dnum: 1, type: \"Electricity\"}], \r\n                resistances: {electricity: 10}, \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"burrow\", label: \"Burrow\", value: \"20\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Brass\", \r\n                attacks: [{name: \"Jaws\", dsize: 8, dnum: 3, type: \"Piercing\"}, {name: \"Claw (agile)\", dsize: 10, dnum: 3, type: \"Slashing\"}, {name: \"Tail\", dsize: 10, dnum: 3, type: \"Bludgeoning\"}, {name: \"Spikes\", dsize: 8, dnum: 3, type: \"Piercing\"}], \r\n                plusattacks: [{name: \"Jaws\", dsize: 4, dnum: 2, type: \"Fire\"}], \r\n                resistances: {fire: 10}, \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"burrow\", label: \"Burrow\", value: \"20\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Bronze\", \r\n                attacks: [{name: \"Jaws\", dsize: 10, dnum: 2, type: \"Piercing\"}, {name: \"Claw (agile)\", dsize: 10, dnum: 3, type: \"Slashing\"}, {name: \"Tail\", dsize: 10, dnum: 3, type: \"Bludgeoning\"}, {name: \"Wing\", dsize: 8, dnum: 3, type: \"Slashing\"}], \r\n                plusattacks: [{name: \"Jaws\", dsize: 12, dnum: 1, type: \"Electricity\"}], \r\n                resistances: {electricity: 10}, \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"40\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Copper\", \r\n                attacks: [{name: \"Jaws\", dsize: 12, dnum: 2, type: \"Piercing\"}, {name: \"Claw (agile)\", dsize: 10, dnum: 3, type: \"Slashing\"}, {name: \"Tail\", dsize: 10, dnum: 3, type: \"Bludgeoning\"}, {name: \"Wing\", dsize: 8, dnum: 3, type: \"Bludgeoning\"}], \r\n                plusattacks: [{name: \"Jaws\", dsize: 6, dnum: 2, type: \"Acid\"}], \r\n                resistances: {acid: 10}, \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"climb\", label: \"Climb\", value: \"25\", exceptions: \"on stone only\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Gold\", \r\n                attacks: [{name: \"Jaws\", dsize: 12, dnum: 2, type: \"Piercing\"}, {name: \"Claw (agile)\", dsize: 6, dnum: 4, type: \"Slashing\"}, {name: \"Tail\", dsize: 10, dnum: 3, type: \"Bludgeoning\"}, {name: \"Horns\", dsize: 8, dnum: 3, type: \"Piercing\"}], \r\n                plusattacks: [{name: \"Jaws\", dsize: 6, dnum: 2, type: \"Fire\"}], \r\n                resistances: {fire: 10}, \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"40\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Green\", \r\n                attacks: [{name: \"Jaws\", dsize: 12, dnum: 2, type: \"Piercing\"}, {name: \"Claw (agile)\", dsize: 10, dnum: 3, type: \"Slashing\"}, {name: \"Tail\", dsize: 10, dnum: 3, type: \"Bludgeoning\"}, {name: \"Horns\", dsize: 8, dnum: 3, type: \"Piercing\"}], \r\n                plusattacks: [{name: \"Jaws\", dsize: 6, dnum: 2, type: \"Poison\"}], \r\n                resistances: {poison: 10}, \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"40\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Red\", \r\n                attacks: [{name: \"Jaws\", dsize: 12, dnum: 2, type: \"Piercing\"}, {name: \"Claw (agile)\", dsize: 6, dnum: 4, type: \"Slashing\"}, {name: \"Tail\", dsize: 10, dnum: 3, type: \"Bludgeoning\"}, {name: \"Wing\", dsize: 8, dnum: 3, type: \"Bludgeoning\"}], \r\n                plusattacks: [{name: \"Jaws\", dsize: 6, dnum: 2, type: \"Fire\"}], \r\n                resistances: {fire: 10}, \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Silver\", \r\n                attacks: [{name: \"Jaws\", dsize: 12, dnum: 2, type: \"Piercing\"}, {name: \"Claw (agile)\", dsize: 10, dnum: 3, type: \"Slashing\"}, {name: \"Tail\", dsize: 10, dnum: 3, type: \"Bludgeoning\"}], \r\n                plusattacks: [{name: \"Jaws\", dsize: 6, dnum: 2, type: \"Cold\"}], \r\n                resistances: {cold: 10}, \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"White\", \r\n                attacks: [{name: \"Jaws\", dsize: 6, dnum: 3, type: \"Piercing\"}, {name: \"Claw (agile)\", dsize: 10, dnum: 3, type: \"Slashing\"}, {name: \"Tail\", dsize: 10, dnum: 3, type: \"Bludgeoning\"}], \r\n                plusattacks: [{name: \"Jaws\", dsize: 6, dnum: 2, type: \"Cold\"}], \r\n                resistances: {cold: 10}, \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"climb\", label: \"Climb\", value: \"25\", exceptions: \"on ice only\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\r\n            },\r\n        ]\r\n    },\r\n\r\n    {\r\n        group: \"Monstrosity Form\",\r\n        class: \"monstrosityShape\",\r\n        forms: [ \r\n            {\r\n                name: \"Phoenix\", \r\n                attacks: [{name: \"Beak\", dsize: 6, dnum: 2, type: \"Piercing plus 2d4 persistent Fire\", bonus: 12}, {name: \"Talon (agile)\", dsize: 8, dnum: 2, type: \"Slashing\", bonus: 12}], \r\n                plusattacks: [{name: \"Beak\", dsize: 4, dnum: 2, type: \"Fire\"}], \r\n                extraFeat: \"Soaring Shape\", \r\n                speed: {value: 30, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"90\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Purple Worm\", \r\n                attacks: [{name: \"Jaws\", dsize: 12, dnum: 2, type: \"Piercing\", bonus: 20}, {name: \"Stinger (agile)\", dsize: 8, dnum: 2, type: \"Piercing plus 2d6 persistent Poison\", bonus: 15}, {name: \"Body\", dsize: 8, dnum: 2, type: \"Bludgeoning\", bonus: 20}], \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"burrow\", label: \"Burrow\", value: \"30\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"20\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Sea Serpent\", \r\n                attacks: [{name: \"Jaws\", dsize: 12, dnum: 2, type: \"Piercing\", bonus: 20}, {name: \"Tail\", dsize: 8, dnum: 2, type: \"Bludgeoning\", bonus: 20}], \r\n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"swim\", label: \"Swim\", value: \"90\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            }, \r\n        ]\r\n    },\r\n\r\n    {\r\n        group: \"Nature Incarnate\",\r\n        class: \"trueShapeshifter\",\r\n        forms: [ \r\n            {\r\n                name: \"Green Man\", \r\n                attacks: [{name: \"Vines\", dsize: 8, dnum: 6, type: \"Bludgeoning\", bonus: 12}, {name: \"Thorns\", dsize: 6, dnum: 6, type: \"Piercing\", bonus: 6}], \r\n                extraFeat: \"Plant Shape\", \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"40\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n                size: 1\r\n            },\r\n            {\r\n                name: \"Kaiju\", \r\n                attacks: [{name: \"Jaws\", dsize: 10, dnum: 6, type: \"Piercing\", bonus: 10}, {name: \"Claws (agile)\", dsize: 8, dnum: 6, type: \"Slashing\", bonus: 8}, {name: \"Foot (agile)\", dsize: 6, dnum: 6, type: \"Bludgeoning\", bonus: 10}], \r\n                resistances: {piercing: 5, bludgeoning: 5, slashing: 5}, \r\n                speed: {value: 50, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            }, \r\n        ]\r\n    },\r\n\r\n    {\r\n        group: \"Avatar\",\r\n        class: \"avatar\",\r\n        forms: [ \r\n            {\r\n                name: \"Abadar\", \r\n                attacks: [{name: \"Crossbow\", dsize: 10, dnum: 6, type: \"Piercing\", bonus: 3}],  \r\n                speed: {value: 50, special: \"\", otherSpeeds: [{type: \"burrow\", label: \"Burrow\", value: \"30\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Achaekek\", \r\n                attacks: [{name: \"Mantis Claw\", dsize: 8, dnum: 6, type: \"Slashing\", bonus: 6}, {name: \"Spine Volley\", dsize: 6, dnum: 6, type: \"Piercing\", bonus: 3}],  \r\n                speed: {value: 70, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"50\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Alseta\", \r\n                attacks: [{name: \"Dagger\", dsize: 6, dnum: 6, type: \"Piercing\", bonus: 6}, {name: \"Portal Toss\", dsize: 6, dnum: 6, type: \"Bludgeoning\", bonus: 3}],  \r\n                speed: {value: 40, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Arazni\", \r\n                attacks: [{name: \"Rapier\", dsize: 8, dnum: 6, type: \"Piercing\", bonus: 6}, {name: \"Call Blood\", dsize: 6, dnum: 6, type: \"Persistent Bleed\"}],  \r\n                speed: {value: 70, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"50\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Asmodeus\", \r\n                attacks: [{name: \"Mace\", dsize: 10, dnum: 6, type: \"Bludgeoning\", bonus: 6}, {name: \"Hell Fire\", dsize: 6, dnum: 6, type: \"Fire\", bonus: 3}],  \r\n                speed: {value: 70, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Besmara\", \r\n                attacks: [{name: \"Rapier\", dsize: 6, dnum: 6, type: \"Piercing\", bonus: 6}, {name: \"Ship's Cannon\", dsize: 6, dnum: 6, type: \"Bludgeoning\", bonus: 3}],  \r\n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"swim\", label: \"Swim\", value: \"70\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Brigh\", \r\n                attacks: [{name: \"Light Hammer\", dsize: 6, dnum: 6, type: \"Bludgeoning\", bonus: 6}, {name: \"Bolt of Molten Bronze\", dsize: 8, dnum: 6, type: \"Fire\", bonus: 3}],  \r\n                speed: {value: 60, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Calistria\", \r\n                attacks: [{name: \"Whip\", dsize: 4, dnum: 6, type: \"Slashing\", bonus: 6}, {name: \"Savoured Sting\", dsize: 6, dnum: 6, type: \"Poison\", bonus: 3}],  \r\n                speed: {value: 30, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"70\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Casandalee\", \r\n                attacks: [{name: \"Polytool\", dsize: 6, dnum: 6, type: \"Slashing\", bonus: 6}, {name: \"Logic Blast\", dsize: 6, dnum: 6, type: \"Mental\", bonus: 3}],  \r\n                speed: {value: 70, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Cayden Cailean\", \r\n                attacks: [{name: \"Rapier\", dsize: 6, dnum: 6, type: \"Piercing\", bonus: 6}, {name: \"Ale Splash\", dsize: 6, dnum: 6, type: \"Poison\", bonus: 3}],  \r\n                speed: {value: 70, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"50\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Chaldira\", \r\n                attacks: [{name: \"Shortsword\", dsize: 6, dnum: 6, type: \"Piercing\", bonus: 6}, {name: \"Fistful of Buttons\", dsize: 6, dnum: 6, type: \"Bludgeoning\", bonus: 3}],  \r\n                speed: {value: 70, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Desna\", \r\n                attacks: [{name: \"Starknife\", dsize: 4, dnum: 6, type: \"Piercing\", bonus: 6}, {name: \"Moonbeam\", dsize: 6, dnum: 6, type: \"Fire\", bonus: 3}],  \r\n                speed: {value: 30, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"70\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Erastil\", \r\n                attacks: [{name: \"Longbow\", dsize: 8, dnum: 6, type: \"Piercing\", bonus: 3}],  \r\n                speed: {value: 70, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Ghlaunder\", \r\n                attacks: [{name: \"Proboscis\", dsize: 6, dnum: 6, type: \"Piercing plus 3d6 persistent Bleed\", bonus: 6}, {name: \"Spine Volley\", dsize: 6, dnum: 6, type: \"Piercing\", bonus: 3}],  \r\n                speed: {value: 30, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"70\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Gorum\", \r\n                attacks: [{name: \"Greatsword\", dsize: 12, dnum: 6, type: \"Slashing\", bonus: 6}],  \r\n                speed: {value: 70, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Gozreh\", \r\n                attacks: [{name: \"Waves\", dsize: 8, dnum: 6, type: \"Bludgeoning\", bonus: 6}, {name: \"Wind\", dsize: 6, dnum: 6, type: \"Bludgeoning\", bonus: 3}],  \r\n                speed: {value: 0, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"70\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"70\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Grandmother Spider\", \r\n                attacks: [{name: \"Leg\", dsize: 6, dnum: 6, type: \"Bludgeoning\", bonus: 6}, {name: \"Venom Web\", dsize: 6, dnum: 6, type: \"Poison\", bonus: 3}],  \r\n                speed: {value: 70, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"70\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Groetus\", \r\n                attacks: [{name: \"War Flail\", dsize: 10, dnum: 6, type: \"Bludgeoning\", bonus: 6}, {name: \"Dreadful Thought\", dsize: 6, dnum: 6, type: \"Mental\", bonus: 3}],  \r\n                speed: {value: 70, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Gruhastha\", \r\n                attacks: [{name: \"Fist\", dsize: 6, dnum: 6, type: \"Bludgeoning\", bonus: 6}, {name: \"Arrow of Enlightenment\", dsize: 6, dnum: 6, type: \"Piercing\", bonus: 3}],  \r\n                speed: {value: 50, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"70\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Hei Feng\", \r\n                attacks: [{name: \"Drunken Sword\", dsize: 6, dnum: 4, type: \"Slashing plus 1d6 Electricity splash\", bonus: 6}, {name: \"Storm Surge\", dsize: 6, dnum: 4, type: \"Bludgeoning plus 1d6 Electricity splash\", bonus: 3}],  \r\n                speed: {value: 70, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Iomedae\", \r\n                attacks: [{name: \"Longsword\", dsize: 8, dnum: 6, type: \"Slashing\", bonus: 6}],  \r\n                speed: {value: 70, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Irori\", \r\n                attacks: [{name: \"Unfettered Strike\", dsize: 8, dnum: 6, type: \"Bludgeoning\", bonus: 6}, {name: \"Wind Strike\", dsize: 4, dnum: 6, type: \"Bludgeoning\", bonus: 6}],  \r\n                speed: {value: 80, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            }, \r\n            {\r\n                name: \"Kazutal\", \r\n                attacks: [{name: \"Machete\", dsize: 6, dnum: 6, type: \"Slashing\", bonus: 6}, {name: \"Jaguar Pounce\", dsize: 6, dnum: 5, type: \"Piercing plus 1d6 persistent Bleed\", bonus: 3}],  \r\n                speed: {value: 60, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"50\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Kurgess\", \r\n                attacks: [{name: \"Lashing Chain\", dsize: 6, dnum: 6, type: \"Bludgeoning\", bonus: 6}, {name: \"Javelin\", dsize: 6, dnum: 6, type: \"Piercing\", bonus: 3}],  \r\n                speed: {value: 70, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"50\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"50\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Lamashtu\", \r\n                attacks: [{name: \"Falchion\", dsize: 10, dnum: 6, type: \"Slashing\", bonus: 6}, {name: \"Waters of Lamashtu\", dsize: 6, dnum: 6, type: \"Poison\", bonus: 3}],  \r\n                speed: {value: 30, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"70\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Milani\", \r\n                attacks: [{name: \"Morningstar\", dsize: 8, dnum: 6, type: \"Bludgeoning\", bonus: 6}],  \r\n                speed: {value: 50, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"70\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Nethys\", \r\n                attacks: [{name: \"Raw Magic\", dsize: 6, dnum: 6, type: \"Force\"}],  \r\n                speed: {value: 70, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Nivi Rhombodazzle\", \r\n                attacks: [{name: \"Returning Light Hammer\", dsize: 6, dnum: 6, type: \"Bludgeoning\", bonus: 6}],  \r\n                speed: {value: 50, special: \"\", otherSpeeds: [{type: \"burrow\", label: \"Burrow\", value: \"30\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Nocticula\", \r\n                attacks: [{name: \"Tail Stinger\", dsize: 6, dnum: 6, type: \"Slashing\", bonus: 6}, {name: \"Magnanimous Smile\", dsize: 6, dnum: 6, type: \"Mental\", bonus: 3}],  \r\n                speed: {value: 70, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"70\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Norgorber\", \r\n                attacks: [{name: \"Shortsword\", dsize: 6, dnum: 6, type: \"Piercing\", bonus: 6}, {name: \"Blackfinger Toss\", dsize: 6, dnum: 6, type: \"Poison\", bonus: 3}],  \r\n                speed: {value: 70, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Pharasma\", \r\n                attacks: [{name: \"Dagger\", dsize: 6, dnum: 6, type: \"Slashing\", bonus: 6}, {name: \"Spiral Blast\", dsize: 8, dnum: 6, type: \"Positive\", bonus: 3}],  \r\n                speed: {value: 70, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Rovagug\", \r\n                attacks: [{name: \"Jaws\", dsize: 12, dnum: 6, type: \"Piercing\", bonus: 6}, {name: \"Leg\", dsize: 8, dnum: 6, type: \"Bludgeoning\", bonus: 6}],  \r\n                speed: {value: 50, special: \"\", otherSpeeds: [{type: \"burrow\", label: \"Burrow\", value: \"30\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Sarenrae\", \r\n                attacks: [{name: \"Scimitar\", dsize: 6, dnum: 6, type: \"Piercing\", bonus: 6}, {name: \"Everflame\", dsize: 6, dnum: 6, type: \"Fire\", bonus: 3}],  \r\n                speed: {value: 30, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"70\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Shelyn\", \r\n                attacks: [{name: \"Glaive\", dsize: 8, dnum: 6, type: \"Slashing\", bonus: 6}, {name: \"Melody of Inner Beauty\", dsize: 6, dnum: 6, type: \"Sonic\", bonus: 3}],  \r\n                speed: {value: 70, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Shizuru\", \r\n                attacks: [{name: \"Katana\", dsize: 6, dnum: 6, type: \"Slashing\", bonus: 6}, {name: \"Sunbolt Arrow\", dsize: 6, dnum: 6, type: \"Fire\", bonus: 3}],  \r\n                speed: {value: 70, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"50\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Sivanah\", \r\n                attacks: [{name: \"Bladed Scarf\", dsize: 8, dnum: 6, type: \"Slashing\", bonus: 6}, {name: \"Illusory Assault\", dsize: 6, dnum: 6, type: \"Mental\", bonus: 3}],  \r\n                speed: {value: 70, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Torag\", \r\n                attacks: [{name: \"Warhammer\", dsize: 8, dnum: 6, type: \"Bludgeoning\", bonus: 6}],  \r\n                speed: {value: 50, special: \"\", otherSpeeds: [{type: \"burrow\", label: \"Burrow\", value: \"30\", exceptions: \"\"}]},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Tsukiyo\", \r\n                attacks: [{name: \"Longspear\", dsize: 10, dnum: 6, type: \"Piercing\", bonus: 6}, {name: \"Moonbeam\", dsize: 6, dnum: 6, type: \"Mental\", bonus: 3}],  \r\n                speed: {value: 70, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Urgathoa\", \r\n                attacks: [{name: \"Scythe\", dsize: 10, dnum: 6, type: \"Slashing\", bonus: 6}, {name: \"Pallid Plague\", dsize: 6, dnum: 6, type: \"Negative\", bonus: 3}],  \r\n                speed: {value: 70, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n            {\r\n                name: \"Zon-Kuthon\", \r\n                attacks: [{name: \"Spiked Chain\", dsize: 8, dnum: 6, type: \"Slashing\", bonus: 6}, {name: \"Midnight Pain\", dsize: 6, dnum: 6, type: \"Mental\", bonus: 3}],  \r\n                speed: {value: 70, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n        ]\r\n    },\r\n\r\n    {\r\n        group: \"Primal Herd\",\r\n        class: \"primalHerd\",\r\n        forms: [ \r\n            {\r\n                name: \"Mammoth\", \r\n                attacks: [{name: \"Tusk\", dsize: 8, dnum: 4, type: \"Piercing\", bonus: 19}, {name: \"Trunk\", dsize: 6, dnum: 4, type: \"Bludgeoning\", bonus: 16}, {name: \"Foot (agile)\", dsize: 6, dnum: 4, type: \"Bludgeoning\", bonus: 13}], \r\n                speed: {value: 40, special: \"\", otherSpeeds: []},\r\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\r\n            },\r\n        ]\r\n    },\r\n];\r\n\r\nlet scalingAttributes = { // for sizes, 1 is Medium, 2 is Large, 3 is Huge, 4 is Gargantuan\r\n    pestForm: // corresponds to the \"class\" of the formGroups above. Used to link the chosen form to the correct statistics for the level it's being cast at\r\n    [// Pest Form\r\n        {level: 1, mod: 0, ac: 15, temphp: 0, damage: 0, skills: {stealth: 10, acrobatics: 10}, size: 0.25},\r\n        {level: 4, mod: 0, ac: 15, temphp: 0, damage: 0, skills: {stealth: 10, acrobatics: 10}, size: 0.25, \r\n            speed: {value: 10, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"20\", exceptions: \"\"}]}\r\n        },\r\n    ],\r\n\r\n    wildShape:\r\n    [// Animal Forms\r\n        {level: 2, mod: 9, ac: 16, temphp: 5, damage: 1, skills: {athletics: 9}, size: 1},\r\n        {level: 3, mod: 14, ac: 17, temphp: 10, damage: 5, skills: {athletics: 14}, size: 1},\r\n        {level: 4, mod: 16, ac: 18, temphp: 15, damage: 9, skills: {athletics: 16}, size: 2},\r\n        {level: 5, mod: 18, ac: 18, temphp: 20, damage: 7, skills: {athletics: 20}, size: 3, double: true}\r\n    ],\r\n    \r\n    insectShape:\r\n    [// Insect Forms\r\n        {level: 3, mod: 13, ac: 18, temphp: 10, damage: 2, skills: {athletics: 13}, size: 1},\r\n        {level: 4, mod: 16, ac: 18, temphp: 15, damage: 6, skills: {athletics: 16}, size: 2},\r\n        {level: 5, mod: 18, ac: 18, temphp: 20, damage: 2, skills: {athletics: 20}, size: 3, double: true},\r\n    ],\r\n\r\n    soaringShape:\r\n    [// Soaring Forms\r\n        {level: 4, mod: 16, ac: 18, temphp: 5, damage: 5, skills: {acrobatics: 16}, size: 1},\r\n        {level: 5, mod: 18, ac: 18, temphp: 10, damage: 8, skills: {acrobatics: 20}, size: 2},\r\n        {level: 6, mod: 21, ac: 21, temphp: 15, damage: 4, skills: {acrobatics: 23}, size: 3, double: true},\r\n    ],\r\n\r\n    ferociousShape:\r\n    [// Ferocious Forms\r\n        {level: 4, mod: 16, ac: 18, temphp: 15, damage: 9, skills: {athletics: 18}, size: 2},\r\n        {level: 5, mod: 18, ac: 18, temphp: 20, damage: 6, skills: {athletics: 21}, size: 3, double: true},\r\n        {level: 7, mod: 25, ac: 21, temphp: 25, damage: 15, skills: {athletics: 25}, size: 4, double: true},\r\n    ],\r\n\r\n    elementalShape:\r\n    [// Elemental Forms\r\n        {level: 5, mod: 18, ac: 18, temphp: 10, damage: 9, skills: {athletics: 20, acrobatics: 20}, size: 1},\r\n        {level: 6, mod: 23, ac: 22, temphp: 15, damage: 13, skills: {athletics: 23, acrobatics: 20}, size: 2},\r\n        {level: 7, mod: 25, ac: 22, temphp: 20, damage: 11, skills: {athletics: 25, acrobatics: 20}, size: 3, double: true},\r\n    ],\r\n\r\n    plantShape:\r\n    [// Plant Forms\r\n        {level: 5, mod: 17, ac: 19, temphp: 12, damage: 11, skills: {athletics: 19}, size: 2},\r\n        {level: 6, mod: 21, ac: 22, temphp: 24, damage: 16, skills: {athletics: 22}, size: 3},\r\n    ],\r\n\r\n    dragonShape:\r\n    [// Dragon Forms\r\n        {level: 6, mod: 22, ac: 18, temphp: 10, damage: 6, skills: {athletics: 23}, size: 2},\r\n        {level: 8, mod: 28, ac: 21, temphp: 15, damage: 12, skills: {athletics: 28}, size: 3},\r\n    ],\r\n\r\n    monstrosityShape:\r\n    [// Monstrosity Forms\r\n        {level: 8, mod: 28, ac: 20, temphp: 20, skills: {athletics: 30}, size: 3},\r\n        {level: 9, mod: 31, ac: 22, temphp: 25, skills: {athletics: 33}, size: 3},\r\n    ],\r\n\r\n    trueShapeshifter:\r\n    [// True Shapeshifter form\r\n        {level: 10, mod: 34, ac: 25, temphp: 30, skills: {athletics: 36}, size: 4},\r\n    ],\r\n\r\n    avatar:\r\n    [// Avatar form\r\n        {level: 10, mod: 33, ac: 25, temphp: 30, skills: {athletics: 35}, size: 3},\r\n    ],\r\n\r\n    primalHerd:\r\n    [// Primal Herd form\r\n        {level: 10, mod: 0, ac: 22, temphp: 20, skills: {athletics: 30}, size: 3},\r\n    ]\r\n};\r\n\r\nlet skillRefs = {\r\n    acrobatics: \"acr\",\r\n    arcana: \"arc\",\r\n    athletics: \"ath\",\r\n    crafting: \"cra\",\r\n    deception: \"dec\",\r\n    diplomacy: \"dip\",\r\n    intimidation: \"itm\",\r\n    medicine: \"med\",\r\n    nature: \"nat\",\r\n    occultism: \"occ\",\r\n    performance: \"prf\",\r\n    religion: \"rel\",\r\n    society: \"soc\",\r\n    stealth: \"ste\",\r\n    survival: \"sur\",\r\n    thievery: \"thi\",\r\n};\r\n\r\n// ------------------------------------------------------------------\r\n// DECLARE VARIABLES\r\n//\r\n\r\n// Dialog variables\r\nlet content = \"\";\r\n\r\n// For token size adjustment\r\nlet width = 1;\r\nlet height = 1;\r\n\r\n// For stats adjustments\r\nlet formValue = 0;\r\nlet origValue = 0;\r\nlet origSpeeds = {};\r\nlet origSenses = [];\r\nlet bypassTo = \"\";\r\n\r\nconst tok = canvas.tokens.controlled[0]; // selected token\r\nconst caster = tok.actor\r\nif (!tok) {\r\n    ui.notifications.error(\"Please select a token\"); \r\n    return; \r\n}\r\nlet tempHP = caster.data.data.attributes.hp.temp;\r\nif (!tempHP) {\r\n    tempHP = 0;\r\n}\r\nlet formData = caster.getFlag(\"world\", \"ss_formData\");\r\nlet isWildShaped = caster.getFlag(\"world\", \"ws_formData\");\r\nlet levelAttributes;\r\n\r\n\r\n// -------------------------------------------------------------------\r\n// DECLARE FUNCTIONS\r\n//--------------------------------------------------------------------\r\n\r\nasync function removeCustomMods() {\r\n    let customMods = Object.keys(caster.data.data.customModifiers)\r\n    for (let element of customMods) {\r\n        for (let mod of caster.data.data.customModifiers[element]) {\r\n            if (mod.name.includes(\"Spellform\")) {\r\n                await removeMod(element, mod.name)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n\r\nasync function removeMod(type, label) {\r\n    if (caster.data.data.customModifiers[type]) {\r\n        await caster.removeCustomModifier(`${type}`, label);\r\n    }\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n\r\nasync function reset(){\r\n    // back to default image, if we changed it\r\n    let img = caster.getFlag(\"world\", \"ss_origImg\");\r\n    if (img) {\r\n        await tok.update({ img });\r\n        await caster.update({ \"token.img\" : img })\r\n    }\r\n\r\n    // This resets the token size. If you use small-size tokens in your game, delete the '//'s \r\n    // preceding the next complete 'if' statement. This will ensure Small PCs revert to their \r\n    // correct size rather than becoming Medium.\r\n    \r\n    // if (caster.data.data.traits.size.value == \"med\"){\r\n    await setSize(1);\r\n    // } else if (caster.data.data.traits.size.value == \"sm\"){\r\n    //    setSize(0.5);\r\n    // };\r\n\r\n    // remove all form attributes from token\r\n    await caster.unsetFlag(\"world\", \"ss_formData\")\r\n    await caster.unsetFlag(\"world\", \"ss_levelAttributes\")\r\n\r\n    // Remove any resistances/weaknesses that were given by transformation\r\n    let filterOut = caster.data.data.traits.dv.filter(element => \r\n        !element.label.includes(\"Form\"))\r\n    await caster.update({ \"data.traits.dv\" : filterOut });\r\n    filterOut = caster.data.data.traits.dr.filter(element => \r\n        !element.label.includes(\"Form\"))\r\n    await caster.update({ \"data.traits.dr\" : filterOut });\r\n\r\n    // reset Speeds and Senses to normal\r\n    await resetSenses();\r\n    await resetSpeeds();\r\n\r\n    // if tempHP was changed, remove tempHP\r\n    await resetTempHP();\r\n\r\n    // remove any custom bonuses applied from the transformation\r\n    await removeCustomMods(); \r\n};\r\n\r\n// -------------------------------------------------------------------\r\n\r\nasync function resetTempHP() {\r\n    let oldTempHP = await caster.getFlag(\"world\", \"ss_tempHPChanged\")\r\n    if (oldTempHP >= 0) {\r\n        await caster.unsetFlag(\"world\", \"ss_tempHPChanged\")\r\n        await caster.update({ \"data.attributes.hp.temp\": oldTempHP });\r\n    }  \r\n}\r\n\r\n// -------------------------------------------------------------------\r\n\r\n// If the form has resistances or weaknesses, add them\r\nasync function applyResistances(formData) {\r\n    if (formData.resistances) {\r\n        let resistances = formData.resistances;\r\n        for (let type in resistances) {\r\n            if (resistances.hasOwnProperty(type)) {\r\n                caster.data.data.traits.dr.push({\r\n                    type: type, \r\n                    label: `Spellform ${type}`, \r\n                    value: resistances[type], \r\n                    exceptions: \"\"\r\n                })\r\n            }\r\n        }\r\n        // create a copy of the resistances array and set resistances to that, so\r\n        // it is preserved when game is reloaded (owing to pass by reference)\r\n        let newResistances = JSON.parse(JSON.stringify(caster.data.data.traits.dr))\r\n        await caster.update({ \"data.traits.dr\" : newResistances })\r\n    }\r\n\r\n    if (formData.weaknesses) {\r\n        let weaknesses = formData.weaknesses;\r\n        for (let type in weaknesses) {\r\n            if (weaknesses.hasOwnProperty(type)) {\r\n                caster.data.data.traits.dv.push({\r\n                    type: type, \r\n                    label: `Spellform ${type}`, \r\n                    value: weaknesses[type], \r\n                    exceptions: \"\"\r\n                })\r\n            }\r\n        }\r\n        let newWeaknesses = JSON.parse(JSON.stringify(caster.data.data.traits.dv))\r\n        await caster.update({ \"data.traits.dv\" : newWeaknesses })\r\n    }\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n\r\nasync function resetSpeeds() {\r\n    let revert = caster.getFlag(\"world\", \"ss_origSpeeds\")\r\n    await caster.update({ \"data.attributes.speed\" : revert})\r\n    await caster.unsetFlag(\"world\", \"ss_origSpeeds\")\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n\r\nasync function resetSenses() {\r\n    let revert = caster.getFlag(\"world\", \"ss_origSenses\")\r\n    await caster.update({ \"data.traits.senses\" : revert})\r\n    await caster.unsetFlag(\"world\", \"ss_origSenses\")\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n\r\n// scales up token depending on the provided size of the new form\r\nasync function setSize(newSize){ \r\n    if (formData && formData.size) {\r\n        tok.update({ width: formData.size, height: formData.size });\r\n        await caster.update({ \"token.width\": formData.size, \"token.height\": formData.size });\r\n    } else {\r\n        tok.update({ width: newSize, height: newSize });\r\n        await caster.update({ \"token.width\" : newSize, \"token.height\" : newSize})\r\n    }\r\n};\r\n\r\n// -------------------------------------------------------------------\r\n\r\n// if the form level's skill bonuses are greater than the character's, use those\r\nasync function skillBonus(levelSkills, baseSkills) {\r\n    let skills = Object.keys(levelSkills)\r\n    for (let skill of skills) {\r\n        if (bypassTo === \"athElemental\") { skill = \"athletics\"; }\r\n        else if (bypassTo === \"acrElemental\") { skill = \"acrobatics\" }\r\n        let abbr = skillRefs[skill];\r\n        origValue = baseSkills[abbr].value\r\n        formValue = levelSkills[skill]\r\n        let label = (`${skill}`).charAt(0).toUpperCase() + (`${skill}`).slice(1);\r\n        if (formValue > origValue) {\r\n            const formBonus = formValue - origValue;\r\n            await caster.addCustomModifier(skill, `Spellform ${label} Bonus`, formBonus, \"untyped\")\r\n        }\r\n    }\r\n}\r\n\r\n// -------------------------------------------------------------------\r\n\r\n// Change the token's speeds to the form's\r\nasync function changeSpeeds() {\r\n    // if there are any changes to speed at this level of the spell, use those\r\n    if (levelAttributes.speed) {\r\n        caster.update({ \"data.attributes.speed\" : levelAttributes.speed })\r\n    } else {  // otherwise use the form's base speeds\r\n        caster.update({ \"data.attributes.speed\" : formData.speed })\r\n    }\r\n}\r\n\r\n// Change the token's senses to the form's\r\nasync function setSenses() {\r\n    // if there are any changes to senses at this level of the spell, use those\r\n    if (levelAttributes.senses) {\r\n        caster.update({ \"data.traits.senses\" : levelAttributes.senses })\r\n    } else { // otherwise use the form's base senses\r\n        caster.update({ \"data.traits.senses\" : formData.senses })\r\n    }\r\n}\r\n\r\n// -------------------------------------------> Main Transform Function Part 1\r\n\r\nasync function chooseSpell(spellName, className) {\r\n    let content2 = \"\";\r\n    content2 += `<p><label for=\"forms\">Choose your form:</label>\r\n    <select name=\"forms\" id=\"forms\">`\r\n    for (let formGroup of formGroups) {\r\n        if (formGroup.group === spellName) {\r\n            formGroup.forms.forEach(form => {\r\n                content2 += `<option value=\"${form.name}\" class=\"${formGroup.class}\">${form.name}</option>`\r\n            })\r\n        }\r\n    }\r\n    content2 += `</select></p>\r\n\r\n    <p><label for=\"level\">What level are you casting at?</label>\r\n    <select name=\"level\" id=\"level\">`\r\n    for (let scalingArray in scalingAttributes) {\r\n        if (scalingArray === className) {\r\n            (scalingAttributes[scalingArray]).forEach(level => {\r\n                content2 += `<option value=\"${level.level}\">${level.level}</option>`\r\n            })\r\n        }\r\n    }\r\n    content2 += `</select></p>`\r\n    content2 += `<p><label for=\"imgchange\">Change token image?</label>\r\n    <input type=\"checkbox\" name=\"imgchange\" id=\"imgchange\">`\r\n\r\n    new Dialog({\r\n        title: \"Choose Form\",\r\n        content: content2,\r\n        buttons: {\r\n            select: {\r\n                icon: \"<i class='fas fa-check'></i>\",\r\n                label: \"Select\",\r\n                callback: async (html) => {\r\n                    let actualForm = html.find(\"#forms\")[0].value;\r\n                    let castingLevel = parseInt(html.find(\"#level\")[0].value); \r\n                    let imgChange = html.find(\"#imgchange\")[0].checked;\r\n                    chooseForm(actualForm, castingLevel, imgChange, className);\r\n                }\r\n            },\r\n            cancel: {\r\n                icon: \"<i class='fas fa-times'></i>\",\r\n                label: \"Cancel\"\r\n            }\r\n        }\r\n    }).render(true);\r\n}\r\n\r\n// ----------------------------> Main Transform Function Part 2\r\n\r\nasync function chooseForm(actualForm, castingLevel, imgChange, className) {\r\n    if (!formData) { // if actor isn't already transformed ->\r\n        // add Form Attributes to token for reference\r\n        for (let group of formGroups) {\r\n            if (group.class === className) { // find the class in formGroups that matches the formType from the selected option in the dialog\r\n                formData = (group.forms).find(element => element.name === actualForm)\r\n                await caster.setFlag(\"world\", \"ss_formData\", formData);\r\n            }\r\n        }\r\n        \r\n        // add the scaling attributes of our selected form to our token for reference\r\n        levelAttributes = scalingAttributes[className].find(element => \r\n            element.level === castingLevel)\r\n        await caster.setFlag(\"world\", \"ss_levelAttributes\", levelAttributes)\r\n\r\n        \r\n        // if there are any form-specific skills, set those first\r\n        if (formData.skills) {\r\n            let formSkills = Object.keys(formData.skills)\r\n            for (let i = 0; i < formSkills.length; i++) {\r\n                let modSkill = (Object.values(caster.data.data.skills)).find(element => element.name === formSkills[i])\r\n                let modValue;\r\n                if (formData.skills[formSkills[i]] !== modSkill.value) {\r\n                    modValue = formData.skills[formSkills[i]] - modSkill.value\r\n                }\r\n                await caster.addCustomModifier(modSkill.name, \"Spellform Value\", modValue, \"untyped\");\r\n            }\r\n        }\r\n\r\n        await applyResistances(formData);\r\n\r\n        // if Form Athletics/Acrobatics bonus is greater than base Athletics/Acrobatics, add \r\n        // Form Bonus to Athletics/Acrobatics value\r\n        if (formData.name == \"Air\" || formData.name == \"Fire\") {\r\n            bypassTo = \"acrElemental\"\r\n        } else if (formData.name == \"Earth\" || formData.name == \"Water\") {\r\n            bypassTo = \"athElemental\"\r\n        }\r\n        await skillBonus(levelAttributes.skills, caster.data.data.skills);\r\n\r\n        // if Form AC bonus is greater than base AC, add Form Bonus to AC value\r\n        formValue = levelAttributes.ac + caster.data.data.details.level.value;\r\n        origValue = caster.data.data.attributes.ac.value;\r\n        if (formValue > origValue) {\r\n            const formACBonus = (formValue - origValue);\r\n            await caster.addCustomModifier(\"ac\", \"Spellform Bonus AC\", formACBonus, \"untyped\");\r\n        }\r\n\r\n        // rememeber original senses for reset\r\n        origSenses = JSON.parse(JSON.stringify(caster.data.data.traits.senses));\r\n        await caster.setFlag(\"world\", \"ss_origSenses\", origSenses);\r\n        await setSenses();\r\n\r\n        // remember original speed for reset\r\n        origSpeeds = JSON.parse(JSON.stringify(caster.data.data.attributes.speed));\r\n        await caster.setFlag(\"world\", \"ss_origSpeeds\", origSpeeds);\r\n        await changeSpeeds();\r\n\r\n        // add temp HP, if Form Temp HP value is greater than already extant temp HP value\r\n        if (!tempHP || (tempHP < levelAttributes.temphp)) {\r\n            await caster.setFlag(\"world\", \"ss_tempHPChanged\", tempHP)\r\n            let newTempHP = levelAttributes.temphp\r\n            await caster.update({ \"data.attributes.hp.temp\": newTempHP });\r\n        };\r\n\r\n        // Change image. Make sure your images are labeled with the form name (w/ correct capitalization)\r\n        // at the end of your token name.\r\n        if (imgChange) {\r\n            let origImg = tok.data.img;\r\n            await caster.setFlag(\"world\", \"ss_origImg\", origImg)\r\n            let img = origImg.slice(0, -4) + (formData.name) + \".png\";\r\n            await tok.update({ img });\r\n            await caster.update({ \"token.img\" : img})\r\n        }\r\n\r\n        // Change size\r\n        if (formData.size) {\r\n            await setSize(formData.size);\r\n        } else {\r\n            await setSize(levelAttributes.size);\r\n        }\r\n    } else {\r\n        ui.notifications.error(\"Please return to normal form before transforming again.\"); \r\n        return;\r\n    }\r\n}\r\n\r\n// --------------------------------------------------------------------------\r\n// INIT\r\n// --------------------------------------------------------------------------\r\n\r\nif (caster.data.type !== \"character\") {\r\n    ui.notifications.error(\"Please select a player character token.\"); \r\n    return; \r\n}\r\n\r\nif (isWildShaped) {\r\n    ui.notifications.error(\"Please use the Wild Shape macro\"); \r\n    return;\r\n}\r\n\r\n// Populate dropdown with all Form Spells\r\ncontent += `<p><label for=\"spells\">What spell are you casting?</label>\r\n<select name=\"spells\" id=\"spells\">`\r\nfor (let formGroup of formGroups) {\r\n    content += `<option value=\"${formGroup.group}\" class=\"${formGroup.class}\">${formGroup.group}</option>`\r\n}\r\ncontent += `</select></p>`\r\n\r\nnew Dialog({\r\n    title: \"Choose Spell\",\r\n    content: content,\r\n    buttons: {\r\n        spell: {\r\n            icon: \"<i class='fas fa-check'></i>\",\r\n            label: \"Next\",\r\n            callback: (html) => {\r\n                if (formData) {\r\n                    ui.notifications.error(\"Please return to normal form before transforming again.\"); \r\n                    return;\r\n                }\r\n                let spell = html.find(\"#spells\")[0].value;\r\n                let selected = html.find(\"#spells\")[0].selectedIndex;\r\n                let className = html.find(\"#spells\")[0].options[selected].className;\r\n                chooseSpell(spell, className);\r\n            }\r\n        },\r\n        revert: {\r\n            icon: \"<i class='fas fa-undo'></i>\",\r\n            label: \"Revert\",\r\n            callback: () => reset(),\r\n        },\r\n        cancel: {\r\n            icon: \"<i class='fas fa-times'></i>\",\r\n            label: \"Cancel\"\r\n        },\r\n    },\r\n}).render(true);","author":"TKPF0VhpkrvAyBOK","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"ULqaIrKxeDb4Lr16","name":"Shape Strike","permission":{"default":0,"TKPF0VhpkrvAyBOK":3},"type":"script","flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"// ------------------------------------------------------------------\r\n// DECLARE VARIABLES\r\n//\r\n\r\nconst tok = canvas.tokens.controlled[0].actor;\r\nlet bonus;\r\n\r\n// Dialog Variables\r\nlet content = \"\";\r\n\r\nlet primeDice; // used to store information for primary damage roll\r\nlet wsAttack; // used to store information for the attack roll\r\nlet attackName; // used to check if attack is agile; to link primary damage rolls with secondary damage rolls; to flavour attack/damage rolls\r\nlet plusDamageData = []; // array used to store all of the secondary damage rolls and their respective types\r\nlet selectedStrike;\r\nlet mod;\r\nlet formData = tok.getFlag(\"world\", \"ws_formData\");\r\nif (!formData) {\r\n    formData = tok.getFlag(\"world\", \"ss_formData\");\r\n}\r\nlet levelAttributes = tok.getFlag(\"world\", \"ws_levelAttributes\")\r\nif (!levelAttributes) {\r\n    levelAttributes = tok.getFlag(\"world\", \"ss_levelAttributes\");\r\n}\r\n\r\n\r\n// -------------------------------------------------------------------\r\n// DECLARE FUNCTIONS\r\n//\r\n\r\nasync function roll(){\r\n    await wsAttack.toMessage({ flavor : `${attackName} Attack`});\r\n\r\n    // if the level of the spell indicates the damage dice should be doubled, set up the dice to do so\r\n    if (levelAttributes.double) {\r\n        primeDice = `${selectedStrike.dnum*2}d${selectedStrike.dsize}`\r\n    } else {\r\n        primeDice = `${selectedStrike.dnum}d${selectedStrike.dsize}`;\r\n    };\r\n\r\n    // if the attack has additional damage dice (like the snake's poison bite) set up those dice. Can support multiple additional damage dice\r\n    if (formData.plusattacks) {\r\n        for (let element of formData.plusattacks) {\r\n            if (element.name === attackName) { // if the name of the additional damage attack corresponds to the attack being rolled, add its info to the additional damage array\r\n                let plusDamageDice;\r\n                if (levelAttributes.double) { // double if indicated\r\n                    plusDamageDice = `${element.dnum*2}d${element.dsize}`\r\n                } else {\r\n                    plusDamageDice = `${element.dnum}d${element.dsize}`\r\n                }\r\n                plusDamageData.push({\r\n                    dice: plusDamageDice, \r\n                    type: element.type,\r\n                    bonus: element.bonus // in case the additional damage has a flat bonus to it\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    let wsDamage;\r\n    // If there is a form specific bonus to damage (as in Monstrosity Form), use that. Otherwise, use the standard damage bonus from level scaling\r\n    if ((selectedStrike.bonus) || (selectedStrike.bonus === 0)) { // Second statement account for attacks that have an attack roll but no damage (the Spider's Web Attack)\r\n        wsDamage = new Roll(primeDice + \"+ @bonus\", {bonus: selectedStrike.bonus});\r\n    } else {\r\n        wsDamage = new Roll(primeDice + \"+ @bonus\", {bonus: levelAttributes.damage});\r\n    }\r\n    wsDamage.toMessage({ flavor : `${attackName} Damage: ${selectedStrike.type}` });\r\n\r\n    // If there is any additional damage to be applied to this attack, roll each of the additional damage dice, applying static bonuses to them if necessary.\r\n    if (plusDamageData.length !== 0) {\r\n        plusDamageData.forEach(plusDamage => {\r\n            let wsDamagePlus;\r\n            if (plusDamage.bonus) {\r\n                wsDamagePlus = new Roll(plusDamage.dice + \"+ @bonus\", {bonus: plusDamage.bonus});\r\n            } else {\r\n                wsDamagePlus = new Roll(plusDamage.dice);\r\n            }\r\n            wsDamagePlus.toMessage({ flavor : `${attackName} Damage: ${plusDamage.type}` });\r\n        })\r\n                \r\n    };\r\n}\r\n\r\n// --------------------------------------------------------------------------\r\n// CODE\r\n//\r\n// if no formData is loaded on the token, they aren't transformed\r\nif (!formData) {\r\n    ui.notifications.error(\"You are not currently transformed.\"); \r\n    return;\r\n};\r\n\r\nif (!(formData.attacks.length > 0)) {\r\n    ui.notifications.error(\"This form cannot attack\"); \r\n    return;\r\n}\r\n\r\n// if there is an ownMod entry, use that as the attack mod instead of the one given by level \r\nif (levelAttributes.ownMod) {\r\n    mod = levelAttributes.ownMod;\r\n} else {\r\n    mod = levelAttributes.mod;\r\n}\r\n\r\n// Populate dropdown with attacks drawn from formData\r\ncontent += `<div><label for=\"attack\">Choose your attack</label>\r\n<select name=\"attack\" id=\"attack\">`\r\nfor (let i=0; i<formData.attacks.length; i++) {\r\n    content += `<option value=\"${i}\">${formData.attacks[i].name}</option> `\r\n};\r\n\r\ncontent += `</select></div>\r\n<div>What attack is this?\r\n</div>`\r\n\r\nnew Dialog({\r\n    title: \"Multiple Attack Penalty\",\r\n    content: content,\r\n    buttons: {\r\n        First: {\r\n            icon: \"<i class='fas fa-caret-square-right'></i>\",\r\n            label: \"First\",\r\n            callback: (html) => { \r\n                // selectedStrike is the attack picked in the dropdown menu, matched to its details in the embedded formData array\r\n                selectedStrike = formData.attacks[(html.find(\"#attack\")[0].value)]; \r\n                attackName = selectedStrike.name;\r\n                wsAttack = new Roll(\"1d20 + @mod\", {mod: mod});\r\n                roll();\r\n            },\r\n        },\r\n        Second: {\r\n            icon: \"<i class='far fa-caret-square-right'></i>\",\r\n            label: \"Second\",\r\n            callback: (html) => {\r\n                selectedStrike = formData.attacks[(html.find(\"#attack\")[0].value)]; \r\n                attackName = selectedStrike.name;\r\n                let isAgile = (attackName.toLowerCase()).search(\"agile\")\r\n                if (isAgile !== -1) {\r\n                    wsAttack = new Roll(\"1d20 + @mod + @pen\", {mod: mod, pen: -4});\r\n                } else {\r\n                    wsAttack = new Roll(\"1d20 + @mod + @pen\", {mod: mod, pen: -5});\r\n                }\r\n                roll();\r\n            },\r\n        },\r\n        Third: {\r\n            icon: \"<i class='fas fa-caret-right'></i>\",\r\n            label: \"Third+\",\r\n            callback: (html) => {\r\n                selectedStrike = formData.attacks[(html.find(\"#attack\")[0].value)];\r\n                attackName = selectedStrike.name;\r\n                let isAgile = (attackName.toLowerCase()).search(\"agile\")\r\n                if (isAgile !== -1) {\r\n                    wsAttack = new Roll(\"1d20 + @mod + @pen\", {mod: mod, pen: -8});\r\n                } else {\r\n                    wsAttack = new Roll(\"1d20 + @mod + @pen\", {mod: mod, pen: -10});\r\n                }\r\n                roll();\r\n            }\r\n        }\r\n    },\r\n}).render(true);","author":"TKPF0VhpkrvAyBOK","img":"icons/svg/dice-target.svg","actorIds":[]}
