{"name":"Spell Shape","permission":{"default":0,"TKPF0VhpkrvAyBOK":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.PHVpqhzF8Ix3Vs5t"}},"scope":"global","command":"// ----------------------------------------------------------------\n// FORM STATS. ADJUST THESE FOR DIFFERENT SPELLS\n//\n\nlet formGroups = [ // contains Attack info for the forms\n    {\n        group: \"Pest Form\", // Doubles as the Feat Name and the Heading under which the form options are displayed in the selection menu\n        class: \"pestForm\", // Used to link to the correct Scaling Attributes group\n        forms: [\n            {\n                name: \"Pest\",\n                weaknesses: {piercing: \"5\", bludgeoning: \"5\", slashing: \"5\"},\n                speed: {value: 10, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\n                skills: {athletics: -4},\n            }\n        ]\n    },\n    {\n        group: \"Animal Form\", // Doubles as the Feat Name and the Heading under which the form options are displayed in the selection menu\n        class: \"animalForm\", // Used to link to the correct Scaling Attributes group\n        forms: [\n            {\n                name: \"Ape\", \n                attacks: {\n                    \"Fist\": {dsize: 6, dnum: 2, type: \"Bludgeoning\"}\n                }, \n                speed: {value: 30, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"20\", exceptions: \"\"}]}, \n                senses: [{type: \"lowLightVision\",label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\n            }, \n            {\n                name: \"Bear\", \n                attacks: {\n                    \"Jaws\": {dsize: 8, dnum: 2, type: \"Piercing\"},\n                    \"Claw\": {dsize: 8, dnum: 1, type: \"Slashing\", traits: [\"Agile\"]}\n                },\n                speed: {value: 30, special: \"\", otherSpeeds: []}, \n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\n            }, \n            {\n                name: \"Bull\", \n                attacks: {\n                    \"Horn\": {dsize: 8, dnum: 2, type: \"Piercing\"}\n                }, \n                speed: {value: 30, special: \"\", otherSpeeds: []}, \n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\n            },\n            {\n                name: \"Canine\", \n                attacks: {\n                    \"Jaws\": {dsize: 8, dnum: 2, type: \"Piercing\"}\n                },\n                speed: {value: 40, special: \"\", otherSpeeds: []}, \n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\n            },\n            {\n                name: \"Cat\", \n                attacks: {\n                    \"Jaws\": {dsize: 6, dnum: 2, type: \"Piercing\"}, \n                    \"Claw\": {dsize: 10, dnum: 1, type: \"Slashing\", traits: [\"Agile\"]}\n                }, \n                speed: {value: 40, special: \"\", otherSpeeds: []}, \n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\n            },\n            {\n                name: \"Deer\", \n                attacks: {\n                    \"Antler\": {dsize: 6, dnum: 2, type: \"Piercing\"}\n                }, \n                speed: {value: 50, special: \"\", otherSpeeds: []}, \n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\n            },\n            {\n                name: \"Frog\", \n                attacks: {\n                    \"Jaws\": {dsize: 6, dnum: 2, type: \"Bludgeoning\"},\n                    \"Tongue\": {dsize: 4, dnum: 2, type: \"Bludgeoning\", traits: [\"Reach 15 feet\"]}\n                }, \n                speed: {value: 25, special: \"\", otherSpeeds: [{type: \"swim\", label: \"Swim\", value: \"25\", exceptions: \"\"}]}, \n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\n            },\n            {\n                name: \"Shark\", \n                attacks: {\n                    \"Jaws\": {dsize: 8, dnum: 2, type: \"Piercing\"}\n                }, \n                speed: {value: 0, special: \"\", otherSpeeds: [{type: \"swim\", label: \"Swim\", value: \"35\", exceptions: \"\"}]}, \n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\n                details: \"Breathe underwater but not in air.\"\n            },\n            {\n                name: \"Snake\", \n                attacks: {\n                    \"Fangs\": {dsize: 4, dnum: 2, type: \"Piercing\"}\n                }, \n                plusattacks: {\n                    \"Fangs\": {dsize: 6, dnum: 1, type: \"Poison\"}\n                }, // plusattacks add additional damage to the same-name primary attack. Can support multiple different instances of additional damage for the same primary attack.\n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"20\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"20\", exceptions: \"\"}]}, \n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\n            } \n        ]\n    },\n    \n    {\n        group: \"Insect Form\",\n        class: \"insectForm\",\n        forms: [\n            {\n                name: \"Ant\", \n                attacks: {\n                    \"Mandibles\": {dsize: 6, dnum: 2, type: \"Bludgeoning\"}\n                }, \n                speed: {value: 30, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"30\", exceptions: \"\"}]},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Beetle\",\n                attacks: {\n                    \"Mandibles\": {dsize: 10, dnum: 2, type: \"Bludgeoning\"}\n                }, \n                speed: {value: 25, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\n            }, \n            {\n                name: \"Centipede\", \n                attacks: {\n                    \"Mandibles\": {dsize: 8, dnum: 1, type: \"Piercing plus 1d4 persistent Poison\"}\n                }, \n                speed: {value: 25, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"25\", exceptions: \"\"}]},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Mantis\", \n                attacks: {\n                    \"Foreleg\": {dsize: 8, dnum: 2, type: \"Bludgeoning\"}\n                }, \n                speed: {value: 40, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Scorpion\", \n                attacks: {\n                    \"Stinger\": {dsize: 8, dnum: 1, type: \"Piercing plus 1d4 persistent Poison\"},\n                    \"Pincer\": {dsize: 6, dnum: 1, type: \"Bludgeoning\", traits: [\"Agile\"]}\n                }, \n                speed: {value: 40, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"tremorsense\", label: \"Imprecise Tremorsense\", value: \"60\", exceptions: \"\"}],\n            },\n            {\n                name: \"Spider\", \n                attacks: {\n                    \"Fangs\": {dsize: 6, dnum: 1, type: \"Piercing plus 1d4 persistent Poison\"},\n                    \"Web\": {type: \"None\", addEffect: \"No damage. Entangles the target for one round\", traits: [\"Range Increment 20 feet\"]}\n                }, \n                speed: {value: 25, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"25\", exceptions: \"\"}]},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n        ]\n    }, \n    \n    { \n        group: \"Aerial Form\",\n        class: \"aerialForm\",\n        forms: [\n            {\n                name: \"Bat\", \n                attacks: {\n                    \"Fangs\": {dsize: 8, dnum: 2, type: \"Piercing\"},\n                    \"Wing\": {dsize: 6, dnum: 2, type: \"Bludgeoning\", traits: [\"Agile\"]}\n                }, \n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"30\", exceptions: \"\"}]},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"echolocation\", label: \"Precise Echolocation\", value: \"40\", exceptions: \"\"}],\n            }, \n            {\n                name: \"Bird\", \n                attacks: {\n                    \"Beak\": {dsize: 8, dnum: 2, type: \"Piercing\"},\n                    \"Talon\": {dsize: 10, dnum: 1, type: \"Slashing\", traits: [\"Agile\"]}\n                }, \n                speed: {value: 10, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"50\", exceptions: \"\"}]},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\n            }, \n            {\n                name: \"Pterosaur\", \n                attacks: {\n                    \"Beak\": {dsize: 6, dnum: 3, type: \"Piercing\"}\n                }, \n                extraFeat: \"Ferocious Shape\", \n                speed: {value: 10, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"40\", exceptions: \"\"}]},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\n            },\n            {\n                name: \"Wasp\", \n                attacks: {\n                    \"Stinger\": {dsize: 8, dnum: 1, type: \"Piercing plus 1d6 persistent Poison\"}\n                }, \n                extraFeat: \"Insect Shape\", \n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"40\", exceptions: \"\"}]},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\n            },\n        ]\n    },\n    \n    { \n        group: \"Dinosaur Form\",\n        class: \"dinosaurForm\",\n        forms: [\n            {\n                name: \"Ankylosaurus\", \n                attacks: {\n                    \"Tail\": {dsize: 6, dnum: 2, type: \"Bludgeoning\", traits: [\"Back Swing\", \"Reach 10 feet\"]},\n                    \"Foot\": {dsize: 6, dnum: 2, type: \"Bludgeoning\"}\n                }, \n                speed: {value: 25, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\n            }, \n            {\n                name: \"Brontosaurus\", \n                attacks: {\n                    \"Tail\": {dsize: 6, dnum: 2, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]},\n                    \"Foot\": {dsize: 8, dnum: 2, type: \"Bludgeoning\"}\n                }, \n                speed: {value: 25, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\n            }, \n            {\n                name: \"Deinonychus\", \n                attacks: {\n                    \"Talon\": {dsize: 4, dnum: 2, type: \"Piercing plus 1 persistent Bleed\", traits: [\"Agile\"]},\n                    \"Jaws\": {dsize: 10, dnum: 1, type: \"Piercing\"}\n                }, \n                speed: {value: 40, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\n            },\n            {\n                name: \"Stegosaurus\", \n                attacks: {\n                    \"Tail\": {dsize: 8, dnum: 2, type: \"Piercing\", traits: [\"Back Swing\", \"Reach 10 feet\"]}\n                }, \n                speed: {value: 30, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\n            },\n            {\n                name: \"Triceratops\", \n                attacks: {\n                    \"Horn\": {dsize: 8, dnum: 2, type: \"Piercing\", addEffect: \"1d6 persistent Bleed on a Crit\"}, \n                    \"Foot\": {dsize: 6, dnum: 2, type: \"Bludgeoning\"}\n                }, \n                speed: {value: 30, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\n            },\n            {\n                name: \"Tyrannosaurus\", \n                attacks: {\n                    \"Jaws\": {dsize: 12, dnum: 1, type: \"Piercing\", traits: [\"Deadly\", \"Reach 10 feet\"]}, \n                    \"Tail\": {dsize: 10, dnum: 1, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}\n                }, \n                speed: {value: 30, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\n            },\n        ]\n    },\n    \n    { \n        group: \"Elemental Form\",\n        class: \"elementalForm\",\n        forms: [\n            {\n                name: \"Air\", \n                attacks: {\n                    \"Gust\": {dsize: 4, dnum: 1, type: \"Bludgeoning\"}\n                }, \n                speed: {value: 0, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"80\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            }, \n            {\n                name: \"Earth\", \n                attacks: {\n                    \"Fist\": {dsize: 10, dnum: 2, type: \"Bludgeoning\"}\n                }, \n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"burrow\", label: \"Burrow\", value: \"20\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            }, \n            {\n                name: \"Fire\", \n                attacks: {\n                    \"Tendril\": {dsize: 8, dnum: 1, type: \"Fire plus 1d4 persistent Fire\"}\n                }, \n                resistances: {fire: 10}, \n                weaknesses: {cold: 5, water: 5}, \n                speed: {value: 50, special: \"\", otherSpeeds: []},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Water\", \n                attacks: {\n                    \"Wave\": {dsize: 12, dnum: 1, type: \"Bludgeoning\", addEffect: \"You can spend an action immediately after a hit to push the target 5 feet with the effects of a successful Shove\"}\n                }, \n                resistances: {fire: 5}, \n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"swim\", label: \"Swim\", value: \"60\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n        ]\n    },\n    \n    { \n        group: \"Plant Form\",\n        class: \"plantForm\",\n        forms: [\n            {\n                name: \"Arboreal\", \n                attacks: {\n                    \"Branch\": {dsize: 10, dnum: 2, type: \"Bludgeoning\", traits: [\"Reach 15 feet\"]},\n                    \"Foot\": {dsize: 8, dnum: 2, type: \"Bludgeoning\"}\n                }, \n                resistances: {poison: 10}, \n                speed: {value: 30, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\n                details: \"You can speak in this form, but you still can't Cast a Spell or supply verbal components.\"\n            }, \n            {\n                name: \"Flytrap\", \n                attacks: {\n                    \"Leaf\": {dsize: 8, dnum: 2, type: \"Piercing\", traits: [\"Reach 10 feet\"], addEffect: \"You can spend an action after a hit to Grab the target\"}\n                }, \n                resistances: {poison: 10, acid: 10}, \n                speed: {value: 15, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\n            }, \n            {\n                name: \"Shambler\", \n                attacks: {\n                    \"Vine\": {dsize: 8, dnum: 2, type: \"Slashing\", traits: [\"Reach 15 feet\"]}\n                }, \n                resistances: {poison: 10, electricity: 10}, \n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"swim\", label: \"Swim\", value: \"20\", exceptions: \"\"}]},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\n            },\n        ]\n    },\n    \n    { \n        group: \"Dragon Form\",\n        class: \"dragonForm\",\n        forms: [\n            {\n                name: \"Black\", \n                attacks: {\n                    \"Jaws\": {dsize: 12, dnum: 2, type: \"Piercing\"}, \n                    \"Claw\": {dsize: 10, dnum: 3, type: \"Slashing\", traits: [\"Agile\"]}, \n                    \"Tail\": {dsize: 10, dnum: 3, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}, \n                    \"Horns\": {dsize: 8, dnum: 3, type: \"Piercing\", traits: [\"Reach 10 feet\"]}\n                }, \n                plusattacks: {\n                    \"Jaws\": {dsize: 6, dnum: 2, type: \"Acid\"}\n                }, \n                resistances: {acid: 10}, \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"60\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\n            }, \n            {\n                name: \"Blue\", \n                attacks: {\n                    \"Jaws\": {dsize: 10, dnum: 2, type: \"Piercing\"}, \n                    \"Claw\": {dsize: 10, dnum: 3, type: \"Slashing\", traits: [\"Agile\"]}, \n                    \"Tail\": {dsize: 10, dnum: 3, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}, \n                    \"Horns\": {dsize: 8, dnum: 3, type: \"Piercing\", traits: [\"Reach 10 feet\"]}\n                }, \n                plusattacks: {\n                    \"Jaws\": {dsize: 12, dnum: 1, type: \"Electricity\"}\n                }, \n                resistances: {electricity: 10}, \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"burrow\", label: \"Burrow\", value: \"20\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\n            }, \n            {\n                name: \"Brass\", \n                attacks: {\n                    \"Jaws\": {dsize: 8, dnum: 3, type: \"Piercing\"},\n                    \"Claw\": {dsize: 10, dnum: 3, type: \"Slashing\", traits: [\"Agile\"]},\n                    \"Tail\": {dsize: 10, dnum: 3, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}, \n                    \"Spikes\": {dsize: 8, dnum: 3, type: \"Piercing\", traits: [\"Reach 10 feet\"]}\n                }, \n                plusattacks: {\n                    \"Jaws\": {dsize: 4, dnum: 2, type: \"Fire\"}, \n                },\n                resistances: {fire: 10}, \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"burrow\", label: \"Burrow\", value: \"20\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\n            },\n            {\n                name: \"Bronze\", \n                attacks: {\n                    \"Jaws\": {dsize: 10, dnum: 2, type: \"Piercing\"},\n                    \"Claw\": {dsize: 10, dnum: 3, type: \"Slashing\", traits: [\"Agile\"]}, \n                    \"Tail\": {dsize: 10, dnum: 3, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}, \n                    \"Wing\": {dsize: 8, dnum: 3, type: \"Slashing\", traits: [\"Reach 10 feet\"]}\n                }, \n                plusattacks: {\n                    \"Jaws\": {dsize: 12, dnum: 1, type: \"Electricity\"}\n                }, \n                resistances: {electricity: 10}, \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"40\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\n            },\n            {\n                name: \"Copper\", \n                attacks: {\n                    \"Jaws\": {dsize: 12, dnum: 2, type: \"Piercing\"},\n                    \"Claw\": {dsize: 10, dnum: 3, type: \"Slashing\", traits: [\"Agile\"]}, \n                    \"Tail\": {dsize: 10, dnum: 3, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}, \n                    \"Wing\": {dsize: 8, dnum: 3, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}\n                }, \n                plusattacks: {\n                    \"Jaws\": {dsize: 6, dnum: 2, type: \"Acid\"}\n                }, \n                resistances: {acid: 10}, \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"climb\", label: \"Climb\", value: \"25\", exceptions: \"on stone only\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\n            },\n            {\n                name: \"Gold\", \n                attacks: {\n                    \"Jaws\": {dsize: 12, dnum: 2, type: \"Piercing\"}, \n                    \"Claw\": {dsize: 6, dnum: 4, type: \"Slashing\", traits: [\"Agile\"]}, \n                    \"Tail\": {dsize: 10, dnum: 3, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}, \n                    \"Horns\": {dsize: 8, dnum: 3, type: \"Piercing\", traits: [\"Reach 10 feet\"]}\n                }, \n                plusattacks: {\n                    \"Jaws\": {dsize: 6, dnum: 2, type: \"Fire\"}\n                }, \n                resistances: {fire: 10}, \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"40\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\n            },\n            {\n                name: \"Green\", \n                attacks: {\n                    \"Jaws\": {dsize: 12, dnum: 2, type: \"Piercing\"}, \n                    \"Claw\": {dsize: 10, dnum: 3, type: \"Slashing\", traits: [\"Agile\"]}, \n                    \"Tail\": {dsize: 10, dnum: 3, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}, \n                    \"Horns\": {dsize: 8, dnum: 3, type: \"Piercing\", traits: [\"Reach 10 feet\"]}\n                }, \n                plusattacks: {\n                    \"Jaws\": {dsize: 6, dnum: 2, type: \"Poison\"}\n                }, \n                resistances: {poison: 10}, \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"40\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\n            },\n            {\n                name: \"Red\", \n                attacks: {\n                    \"Jaws\": {dsize: 12, dnum: 2, type: \"Piercing\"}, \n                    \"Claw\": {dsize: 6, dnum: 4, type: \"Slashing\", traits: [\"Agile\"]}, \n                    \"Tail\": {dsize: 10, dnum: 3, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}, \n                    \"Wing\": {dsize: 8, dnum: 3, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}\n                }, \n                plusattacks: {\n                    \"Jaws\": {dsize: 6, dnum: 2, type: \"Fire\"}\n                }, \n                resistances: {fire: 10}, \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\n            },\n            {\n                name: \"Silver\", \n                attacks: {\n                    \"Jaws\": {dsize: 12, dnum: 2, type: \"Piercing\"}, \n                    \"Claw\": {dsize: 10, dnum: 3, type: \"Slashing\", traits: [\"Agile\"]}, \n                    \"Tail\": {dsize: 10, dnum: 3, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}\n                }, \n                plusattacks: {\n                    \"Jaws\": {dsize: 6, dnum: 2, type: \"Cold\"}\n                }, \n                resistances: {cold: 10}, \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\n            }, \n            {\n                name: \"White\", \n                attacks: {\n                    \"Jaws\": {dsize: 6, dnum: 3, type: \"Piercing\"}, \n                    \"Claw\": {dsize: 10, dnum: 3, type: \"Slashing\", traits: [\"Agile\"]}, \n                    \"Tail\": {dsize: 10, dnum: 3, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}\n                }, \n                plusattacks: {\n                    \"Jaws\": {dsize: 6, dnum: 2, type: \"Cold\"}\n                }, \n                resistances: {cold: 10}, \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"climb\", label: \"Climb\", value: \"25\", exceptions: \"on ice only\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\n            },\n        ]\n    },\n\n    {\n        group: \"Monstrosity Form\",\n        class: \"monstrosityForm\",\n        forms: [ \n            {\n                name: \"Phoenix\", \n                attacks: {\n                    \"Beak\": {dsize: 6, dnum: 2, type: \"Piercing plus 2d4 persistent Fire\", bonus: 12, traits: [\"Reach 15 feet\"]},\n                    \"Talon\": {dsize: 8, dnum: 2, type: \"Slashing\", bonus: 12, traits: [\"Agile\", \"Reach 15 feet\"]}\n                }, \n                plusattacks: {\n                    \"Beak\": {dsize: 4, dnum: 2, type: \"Fire\"}\n                }, \n                extraFeat: \"Soaring Shape\", \n                speed: {value: 30, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"90\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n                details: \"<strong>Shroud of Flame</strong> (aura, evocation, fire, primal) 20 feet. You gain an aura of fire that extends out from you. A creature that enters or ends its turn within the aura takes 2d6 fire damage. A creature can take this damage only once per turn. You can use a single action, which has the concentrate trait, to activate or deactivate this aura.\"\n            }, \n            {\n                name: \"Purple Worm\", \n                attacks: {\n                    \"Jaws\": {dsize: 12, dnum: 2, type: \"Piercing\", bonus: 20, traits: [\"Reach 10 feet\"]},\n                    \"Stinger\": {dsize: 8, dnum: 2, type: \"Piercing plus 2d6 persistent Poison\", bonus: 15, traits: [\"Agile\", \"Reach 10 feet\"]},\n                    \"Body\": {dsize: 8, dnum: 2, type: \"Bludgeoning\", bonus: 20, traits: [\"Reach 10 feet\"]}\n                }, \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"burrow\", label: \"Burrow\", value: \"30\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"20\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n                details: \"<strong>Inexorable</strong> You automatically recover from the paralyzed, slowed, and stunned conditions at the end of each of your turns. You're also immune to being immobilized and ignore difficult terrain and greater difficult terrain.\"\n            }, \n            {\n                name: \"Sea Serpent\", \n                attacks: {\n                    \"Jaws\": {dsize: 12, dnum: 2, type: \"Piercing\", bonus: 20, traits: [\"Reach 15 feet\"]},\n                    \"Tail\": {dsize: 8, dnum: 2, type: \"Bludgeoning\", bonus: 20, traits: [\"Reach 25 feet\"]}\n                }, \n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"swim\", label: \"Swim\", value: \"90\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            }, \n        ]\n    },\n\n    {\n        group: \"Nature Incarnate\",\n        class: \"natureIncarnate\",\n        forms: [ \n            {\n                name: \"Green Man\", \n                attacks: {\n                    \"Vines\": {dsize: 8, dnum: 6, type: \"Bludgeoning\", bonus: 12, traits: [\"Reach 30 feet\", \"Versatile P\"]},\n                    \"Thorns\": {dsize: 6, dnum: 6, type: \"Piercing\", bonus: 6, traits: [\"Range 100 feet\"]}\n                }, \n                extraFeat: \"Plant Shape\", \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"40\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n                size: 1,\n                details: \"<strong>Green Caress</strong> (aura, primal, transmutation) 60 feet. Enemies other than plants must succeed at a Fortitude save against your spell DC or become clumsy 1 for 1 round (clumsy 2 on a critical failure).\" \n            },\n            {\n                name: \"Kaiju\", \n                attacks: {\n                    \"Jaws\": {dsize: 10, dnum: 6, type: \"Piercing\", bonus: 10, traits: [\"Reach 30 feet\"]},\n                    \"Claws\": {dsize: 8, dnum: 6, type: \"Slashing\", bonus: 8, traits: [\"Agile\", \"Reach 30 feet\"]},\n                    \"Foot\": {dsize: 6, dnum: 6, type: \"Bludgeoning\", bonus: 10, traits: [\"Agile\", \"Reach 15 feet\"]}\n                }, \n                resistances: {piercing: 5, bludgeoning: 5, slashing: 5}, \n                speed: {value: 50, special: \"\", otherSpeeds: []},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n                details: \"<strong>Unstoppable</strong> You are immune to being immobilized and ignore difficult terrain and greater difficult terrain.\"\n            }, \n        ]\n    },\n\n    {\n        group: \"Avatar\",\n        class: \"avatar\",\n        forms: [ \n            {\n                name: \"Abadar\", \n                attacks: {\n                    \"Crossbow\": {dsize: 10, dnum: 6, type: \"Piercing\", bonus: 3, traits: [\"Range Increment 120 feet\", \"Reload 1\"]}\n                },  \n                speed: {value: 50, special: \"\", otherSpeeds: [{type: \"burrow\", label: \"Burrow\", value: \"30\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Achaekek\", \n                attacks: {\n                    \"Mantis Claw\": {dsize: 8, dnum: 6, type: \"Slashing\", bonus: 6, traits: [\"Agile\", \"Backswing\", \"Finesse\", \"Reach 15 feet\", \"Versatile P\"]},\n                    \"Spine Volley\": {dsize: 6, dnum: 6, type: \"Piercing\", bonus: 3, traits: [\"Range 60 feet\"]}\n                },  \n                speed: {value: 70, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"50\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Alseta\", \n                attacks: {\n                    \"Dagger\": {dsize: 6, dnum: 6, type: \"Piercing\", bonus: 6, traits: [\"Agile\", \"Finesse\", \"Reach 15 feet\", \"Thrown 40 feet\", \"Versatile P\"]},\n                    \"Portal Toss\": {dsize: 6, dnum: 6, type: \"Bludgeoning\", bonus: 3, traits: [\"Range 60 feet\"], addEffect: \"The portal toss Strike causes the creature to fall through a series of portals before landing in the same spot and taking damage.\"}\n                },  \n                speed: {value: 40, special: \"\", otherSpeeds: []},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Arazni\", \n                attacks: {\n                    \"Rapier\": {dsize: 8, dnum: 6, type: \"Piercing\", bonus: 6, traits: [\"Deadly 3d8\", \"Reach 15 feet\"]},\n                    \"Call Blood\": {dsize: 6, dnum: 6, type: \"Persistent Bleed\", traits: [\"Range 120 feet\"]}\n                },  \n                speed: {value: 70, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"50\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Asmodeus\", \n                attacks: {\n                    \"Mace\": {dsize: 10, dnum: 6, type: \"Bludgeoning\", bonus: 6, traits: [\"Reach 15 feet\"]},\n                    \"Hell Fire\": {dsize: 6, dnum: 6, type: \"Fire\", bonus: 3, traits: [\"Range 120 feet\"]}\n                },  \n                speed: {value: 70, special: \"\", otherSpeeds: []},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Besmara\", \n                attacks: {\n                    \"Rapier\": {dsize: 6, dnum: 6, type: \"Piercing\", bonus: 6, traits: [\"Deadly 3d8\", \"Disarm\", \"Finesse\", \"Reach 15 feet\"]},\n                    \"Ship's Cannon\": {dsize: 6, dnum: 6, type: \"Bludgeoning\", bonus: 3, traits: [\"Range 120 feet\"]}\n                },  \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"swim\", label: \"Swim\", value: \"70\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Brigh\", \n                attacks: {\n                    \"Light Hammer\": {dsize: 6, dnum: 6, type: \"Bludgeoning\", bonus: 6, traits: [\"Agile\", \"Reach 15 feet\", \"Thrown 40 feet\"]},\n                    \"Bolt of Molten Bronze\": {dsize: 8, dnum: 6, type: \"Fire\", bonus: 3, traits: [\"Range 120 feet\"]}\n                },  \n                speed: {value: 60, special: \"\", otherSpeeds: []},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Calistria\", \n                attacks: {\n                    \"Whip\": {dsize: 4, dnum: 6, type: \"Slashing\", bonus: 6, traits: [\"Disarm\", \"Finesse\", \"Nonlethal\", \"Reach 20 feet\"]},\n                    \"Savoured Sting\": {dsize: 6, dnum: 6, type: \"Poison\", bonus: 3, traits: [\"Range 60 feet\"]}\n                },  \n                speed: {value: 30, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"70\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Casandalee\", \n                attacks: {\n                    \"Polytool\": {dsize: 6, dnum: 6, type: \"Slashing\", bonus: 6, traits: [\"Reach 15 feet\"]},\n                    \"Logic Blast\": {dsize: 6, dnum: 6, type: \"Mental\", bonus: 3, traits: [\"Range 120 feet\"]}\n                },  \n                speed: {value: 70, special: \"\", otherSpeeds: []},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Cayden Cailean\", \n                attacks: {\n                    \"Rapier\": {dsize: 6, dnum: 6, type: \"Piercing\", bonus: 6, traits: [\"Deadly\", \"Reach 15 feet\"]},\n                    \"Ale Splash\": {dsize: 6, dnum: 6, type: \"Poison\", bonus: 3, traits: [\"Range 120 feet\"]}\n                },  \n                speed: {value: 70, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"50\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Chaldira\", \n                attacks: {\n                    \"Shortsword\": {dsize: 6, dnum: 6, type: \"Piercing\", bonus: 6, traits: [\"Agile\", \"Finesse\", \"Reach 15 feet\", \"Versatile S\"]},\n                    \"Fistful of Buttons\": {dsize: 6, dnum: 6, type: \"Bludgeoning\", bonus: 3, traits: [\"Nonlethal\", \"Range 120 feet\"]}\n                },  \n                speed: {value: 70, special: \"\", otherSpeeds: []},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Desna\", \n                attacks: {\n                    \"Starknife\": {dsize: 4, dnum: 6, type: \"Piercing\", bonus: 6, traits: [\"Agile\", \"Deadly\", \"Finesse\", \"Reach 15 feet\", \"Silver\", \"Thrown 60 feet\"]},\n                    \"Moonbeam\": {dsize: 6, dnum: 6, type: \"Fire\", bonus: 3, traits: [\"Range 210 feet\", \"Silver\"]}\n                },  \n                speed: {value: 30, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"70\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Erastil\", \n                attacks: {\n                    \"Longbow\": {dsize: 8, dnum: 6, type: \"Piercing\", bonus: 3, traits: [\"Deadly d8\", \"Range Increment 150 feet\"]}\n                },  \n                speed: {value: 70, special: \"\", otherSpeeds: []},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Ghlaunder\", \n                attacks: {\n                    \"Proboscis\": {dsize: 6, dnum: 6, type: \"Piercing plus 3d6 persistent Bleed\", bonus: 6, traits: [\"Agile\", \"Reach 20 feet\"]},\n                },  \n                speed: {value: 30, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"70\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Gorum\", \n                attacks: {\n                    \"Greatsword\": {dsize: 12, dnum: 6, type: \"Slashing\", bonus: 6, traits: [\"Versatile P\", \"Reach 15 feet\"]}\n                },  \n                speed: {value: 70, special: \"\", otherSpeeds: []},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Gozreh\", \n                attacks: {\n                    \"Waves\": {dsize: 8, dnum: 6, type: \"Bludgeoning\", bonus: 6, traits: [\"Bull Rush\", \"Reach 15 feet\", \"Thrown 20 feet\"]},\n                    \"Wind\": {dsize: 6, dnum: 6, type: \"Bludgeoning\", bonus: 3, traits: [\"Versatile Electricity\", \"Range 120 feet\"]}\n                },  \n                speed: {value: 0, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"70\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"70\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Grandmother Spider\", \n                attacks: {\n                    \"Leg\": {dsize: 6, dnum: 6, type: \"Bludgeoning\", bonus: 6, traits: [\"Deadly 3d8\", \"Finesse\", \"Reach 15 feet\", \"Versatile P\"]},\n                    \"Venom Web\": {dsize: 6, dnum: 6, type: \"Poison\", bonus: 3, traits: [\"Range 120 feet\"]}\n                },  \n                speed: {value: 70, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"70\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Groetus\", \n                attacks: {\n                    \"War Flail\": {dsize: 10, dnum: 6, type: \"Bludgeoning\", bonus: 6, traits: [\"Disarm\", \"Reach 15 feet\", \"Sweep\", \"Trip\"]},\n                    \"Dreadful Thought\": {dsize: 6, dnum: 6, type: \"Mental\", bonus: 3, traits: [\"Range 120 feet\"]}\n                },  \n                speed: {value: 70, special: \"\", otherSpeeds: []},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Gruhastha\", \n                attacks: {\n                    \"Fist\": {dsize: 6, dnum: 6, type: \"Bludgeoning\", bonus: 6, traits: [\"Agile\", \"Finesse\", \"Nonlethal\", \"Reach 15 feet\"]},\n                    \"Arrow of Enlightenment\": {dsize: 6, dnum: 6, type: \"Piercing\", bonus: 3, traits: [\"Deadly 3d10\", \"Range Increment 120 feet\"]}\n                },  \n                speed: {value: 50, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"70\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Hei Feng\", \n                attacks: {\n                    \"Drunken Sword\": {dsize: 6, dnum: 4, type: \"Slashing plus 1d6 Electricity splash\", bonus: 6, traits: [\"Forceful\", \"Reach 15 feet\"]},\n                    \"Storm Surge\": {dsize: 6, dnum: 4, type: \"Bludgeoning plus 1d6 Electricity splash\", bonus: 3, traits: [\"Range 120 feet\", \"Air\", \"Water\"], addEffect: \"The caster is immune to this splash damage\"}\n                },  \n                speed: {value: 70, special: \"\", otherSpeeds: []},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Iomedae\", \n                attacks: {\n                    \"Longsword\": {dsize: 8, dnum: 6, type: \"Slashing\", bonus: 6, traits: [\"Versatile P\", \"Reach 15 feet\"]}\n                },  \n                speed: {value: 70, special: \"\", otherSpeeds: []},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Irori\", \n                attacks: {\n                    \"Unfettered Strike\": {dsize: 8, dnum: 6, type: \"Bludgeoning\", bonus: 6, traits: [\"Agile\", \"Versatile P or S\", \"Finesse\", \"Reach 15 feet\"]},\n                    \"Wind Strike\": {dsize: 4, dnum: 6, type: \"Bludgeoning\", bonus: 6, traits: [\"Range 60 feet\"]}\n                },  \n                speed: {value: 80, special: \"\", otherSpeeds: []},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            }, \n            {\n                name: \"Kazutal\", \n                attacks: {\n                    \"Machete\": {dsize: 6, dnum: 6, type: \"Slashing\", bonus: 6, traits: [\"Agile\", \"Reach 15 feet\"]},\n                    \"Jaguar Pounce\": {dsize: 6, dnum: 5, type: \"Piercing plus 1d6 persistent Bleed\", bonus: 3, traits: [\"Range 60 feet\"]}\n                },  \n                speed: {value: 60, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"50\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Kurgess\", \n                attacks: {\n                    \"Lashing Chain\": {dsize: 6, dnum: 6, type: \"Bludgeoning\", bonus: 6, traits: [\"Disarm\", \"Reach 20 feet\", \"Trip\"]},\n                    \"Javelin\": {dsize: 6, dnum: 6, type: \"Piercing\", bonus: 3, traits: [\"Range Increment 60 feet\", \"Thrown\"]}\n                },  \n                speed: {value: 70, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"50\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"50\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Lamashtu\", \n                attacks: {\n                    \"Falchion\": {dsize: 10, dnum: 6, type: \"Slashing\", bonus: 6, traits: [\"Forceful\", \"Reach 15 feet\"]},\n                    \"Waters of Lamashtu\": {dsize: 6, dnum: 6, type: \"Poison\", bonus: 3, traits: [\"Range 120 feet\"]}\n                },  \n                speed: {value: 30, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"70\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Milani\", \n                attacks: {\n                    \"Morningstar\": {dsize: 8, dnum: 6, type: \"Bludgeoning\", bonus: 6, traits: [\"Versatile P\", \"Reach 15 feet\"]}\n                },  \n                speed: {value: 50, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"70\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Nethys\", \n                attacks: {\n                    \"Raw Magic\": {dsize: 6, dnum: 6, type: \"Force\", traits: [\"Range 120 feet\", \"Versatile Cold, Electricity, or Fire\"]}\n                },  \n                speed: {value: 70, special: \"\", otherSpeeds: []},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Nivi Rhombodazzle\", \n                attacks: {\n                    \"Returning Light Hammer\": {dsize: 6, dnum: 6, type: \"Bludgeoning\", bonus: 6, traits: [\"Agile\", \"Thrown 40 feet\"]}\n                },  \n                speed: {value: 50, special: \"\", otherSpeeds: [{type: \"burrow\", label: \"Burrow\", value: \"30\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Nocticula\", \n                attacks: {\n                    \"Tail Stinger\": {dsize: 6, dnum: 6, type: \"Slashing\", bonus: 6, traits: [\"Agile\", \"Finesse\", \"Reach 15 feet\", \"Trip\"]},\n                    \"Magnanimous Smile\": {dsize: 6, dnum: 6, type: \"Mental\", bonus: 3, traits: [\"Nonlethal\", \"Range 120 feet\", \"Visual\"]}\n                },  \n                speed: {value: 70, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"70\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Norgorber\", \n                attacks: {\n                    \"Shortsword\": {dsize: 6, dnum: 6, type: \"Piercing\", bonus: 6, traits: [\"Agile\", \"Finesse\", \"Versatile S\", \"Reach 15 feet\"]},\n                    \"Blackfinger Toss\": {dsize: 6, dnum: 6, type: \"Poison\", bonus: 3, traits: [\"Range 120 feet\"]}\n                },  \n                speed: {value: 70, special: \"\", otherSpeeds: []},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Pharasma\", \n                attacks: {\n                    \"Dagger\": {dsize: 6, dnum: 6, type: \"Slashing\", bonus: 6, traits: [\"Agile\", \"Finesse\", \"Reach 15 feet\", \"Thrown 40 feet\"]},\n                    \"Spiral Blast\": {dsize: 8, dnum: 6, type: \"Positive\", bonus: 3, traits: [\"Range 120 feet\"], addEffect: \"Damages only undead\"}\n                },  \n                speed: {value: 70, special: \"\", otherSpeeds: []},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Rovagug\", \n                attacks: {\n                    \"Jaws\": {dsize: 12, dnum: 6, type: \"Piercing\", bonus: 6, traits: [\"Reach 15 feet\"]},\n                    \"Leg\": {dsize: 8, dnum: 6, type: \"Bludgeoning\", bonus: 6, traits: [\"Agile\", \"Versatile P\", \"Reach 15 feet\"]}\n                },  \n                speed: {value: 50, special: \"\", otherSpeeds: [{type: \"burrow\", label: \"Burrow\", value: \"30\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Sarenrae\", \n                attacks: {\n                    \"Scimitar\": {dsize: 6, dnum: 6, type: \"Piercing\", bonus: 6, traits: [\"Forceful\", \"Nonlethal\", \"Reach 15 feet\"]},\n                    \"Everflame\": {dsize: 6, dnum: 6, type: \"Fire\", bonus: 3, traits: [\"Nonlethal\", \"Range 120 feet\"]}\n                },  \n                speed: {value: 30, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"70\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Shelyn\", \n                attacks: {\n                    \"Glaive\": {dsize: 8, dnum: 6, type: \"Slashing\", bonus: 6, traits: [\"Deadly d8\", \"Nonlethal\", \"Reach 20 feet\"]},\n                    \"Melody of Inner Beauty\": {dsize: 6, dnum: 6, type: \"Sonic\", bonus: 3, traits: [\"Nonlethal\", \"Range 120 feet\"]}\n                },  \n                speed: {value: 70, special: \"\", otherSpeeds: []},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Shizuru\", \n                attacks: {\n                    \"Katana\": {dsize: 6, dnum: 6, type: \"Slashing\", bonus: 6, traits: [\"Deadly 3d8\", \"Two-Hand d10\", \"Reach 15 feet\", \"Versatile P\"]},\n                    \"Sunbolt Arrow\": {dsize: 6, dnum: 6, type: \"Fire\", bonus: 3, traits: [\"Range 120 feet\"]}\n                },  \n                speed: {value: 70, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"50\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Sivanah\", \n                attacks: {\n                    \"Bladed Scarf\": {dsize: 8, dnum: 6, type: \"Slashing\", bonus: 6, traits: [\"Disarm\", \"Finesse\", \"Reach 15 feet\", \"Trip\"]},\n                    \"Illusory Assault\": {dsize: 6, dnum: 6, type: \"Mental\", bonus: 3, traits: [\"Range 120 feet\"]}\n                },  \n                speed: {value: 70, special: \"\", otherSpeeds: []},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Torag\", \n                attacks: {\n                    \"Warhammer\": {dsize: 8, dnum: 6, type: \"Bludgeoning\", bonus: 6, traits: [\"Bull Rush\", \"Reach 15 feet\"]}\n                },  \n                speed: {value: 50, special: \"\", otherSpeeds: [{type: \"burrow\", label: \"Burrow\", value: \"30\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Tsukiyo\", \n                attacks: {\n                    \"Longspear\": {dsize: 10, dnum: 6, type: \"Piercing\", bonus: 6, traits: [\"Reach 20 feet\"]},\n                    \"Moonbeam\": {dsize: 6, dnum: 6, type: \"Mental\", bonus: 3, traits: [\"Nonlethal\", \"Range 120 feet\", \"Silver\"]}\n                },  \n                speed: {value: 70, special: \"\", otherSpeeds: []},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Urgathoa\", \n                attacks: {\n                    \"Scythe\": {dsize: 10, dnum: 6, type: \"Slashing\", bonus: 6, traits: [\"Deadly d10\", \"Trip\", \"Reach 15 feet\"]},\n                    \"Pallid Plague\": {dsize: 6, dnum: 6, type: \"Negative\", bonus: 3, traits: [\"Range 120 feet\"]}\n                },  \n                speed: {value: 70, special: \"\", otherSpeeds: []},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Zon-Kuthon\", \n                attacks: {\n                    \"Spiked Chain\": {dsize: 8, dnum: 6, type: \"Slashing\", bonus: 6, traits: [\"Disarm\", \"Trip\", \"Reach 15 feet\"]},\n                    \"Midnight Pain\": {dsize: 6, dnum: 6, type: \"Mental\", bonus: 3, traits: [\"Mental\", \"Nonlethal\", \"Range 120 feet\"]}\n                },  \n                speed: {value: 70, special: \"\", otherSpeeds: []},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n        ]\n    },\n\n    {\n        group: \"Primal Herd\",\n        class: \"primalHerd\",\n        forms: [ \n            {\n                name: \"Mammoth\", \n                attacks: {\n                    \"Tusk\": {dsize: 8, dnum: 4, type: \"Piercing\", bonus: 19, traits: [\"Reach 15 feet\"]},\n                    \"Trunk\": {dsize: 6, dnum: 4, type: \"Bludgeoning\", bonus: 16, traits: [\"Agile\", \"Reach 15 feet\"]},\n                    \"Foot\": {dsize: 6, dnum: 4, type: \"Bludgeoning\", bonus: 13, traits: [\"Agile, Reach 15 feet\"]}\n                }, \n                speed: {value: 40, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\n            },\n        ]\n    },\n];\n\nlet scalingAttributes = { // for sizes, 1 is Medium, 2 is Large, 3 is Huge, 4 is Gargantuan\n    pestForm: // corresponds to the \"class\" of the formGroups above. Used to link the chosen form to the correct statistics for the level it's being cast at\n    [// Pest Form\n        {level: 1, mod: 0, ac: 15, temphp: 0, damage: 0, skills: {stealth: 10, acrobatics: 10}, size: 0.25},\n        {level: 4, mod: 0, ac: 15, temphp: 0, damage: 0, skills: {stealth: 10, acrobatics: 10}, size: 0.25, \n            speed: {value: 10, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"20\", exceptions: \"\"}]}\n        },\n    ],\n\n    animalForm:\n    [// Animal Forms\n        {level: 2, mod: 9, ac: 16, temphp: 5, damage: 1, skills: {athletics: 9}, size: 1},\n        {level: 3, mod: 14, ac: 17, temphp: 10, damage: 5, skills: {athletics: 14}, size: 1},\n        {level: 4, mod: 16, ac: 18, temphp: 15, damage: 9, skills: {athletics: 16}, size: 2},\n        {level: 5, mod: 18, ac: 18, temphp: 20, damage: 7, skills: {athletics: 20}, size: 3, double: true}\n    ],\n    \n    insectForm:\n    [// Insect Forms\n        {level: 3, mod: 13, ac: 18, temphp: 10, damage: 2, skills: {athletics: 13}, size: 1},\n        {level: 4, mod: 16, ac: 18, temphp: 15, damage: 6, skills: {athletics: 16}, size: 2},\n        {level: 5, mod: 18, ac: 18, temphp: 20, damage: 2, skills: {athletics: 20}, size: 3, double: true},\n    ],\n\n    aerialForm:\n    [// Soaring Forms\n        {level: 4, mod: 16, ac: 18, temphp: 5, damage: 5, skills: {acrobatics: 16}, size: 1},\n        {level: 5, mod: 18, ac: 18, temphp: 10, damage: 8, skills: {acrobatics: 20}, size: 2},\n        {level: 6, mod: 21, ac: 21, temphp: 15, damage: 4, skills: {acrobatics: 23}, size: 3, double: true},\n    ],\n\n    dinosaurForm:\n    [// Ferocious Forms\n        {level: 4, mod: 16, ac: 18, temphp: 15, damage: 9, skills: {athletics: 18}, size: 2},\n        {level: 5, mod: 18, ac: 18, temphp: 20, damage: 6, skills: {athletics: 21}, size: 3, double: true},\n        {level: 7, mod: 25, ac: 21, temphp: 25, damage: 15, skills: {athletics: 25}, size: 4, double: true},\n    ],\n\n    elementalForm:\n    [// Elemental Forms\n        {level: 5, mod: 18, ac: 18, temphp: 10, damage: 9, skills: {athletics: 20, acrobatics: 20}, size: 1},\n        {level: 6, mod: 23, ac: 22, temphp: 15, damage: 13, skills: {athletics: 23, acrobatics: 20}, size: 2},\n        {level: 7, mod: 25, ac: 22, temphp: 20, damage: 11, skills: {athletics: 25, acrobatics: 20}, size: 3, double: true},\n    ],\n\n    plantForm:\n    [// Plant Forms\n        {level: 5, mod: 17, ac: 19, temphp: 12, damage: 11, skills: {athletics: 19}, size: 2},\n        {level: 6, mod: 21, ac: 22, temphp: 24, damage: 16, skills: {athletics: 22}, size: 3},\n    ],\n\n    dragonForm:\n    [// Dragon Forms\n        {level: 6, mod: 22, ac: 18, temphp: 10, damage: 6, skills: {athletics: 23}, size: 2},\n        {level: 8, mod: 28, ac: 21, temphp: 15, damage: 12, skills: {athletics: 28}, size: 3},\n    ],\n\n    monstrosityForm:\n    [// Monstrosity Forms\n        {level: 8, mod: 28, ac: 20, temphp: 20, skills: {athletics: 30}, size: 3},\n        {level: 9, mod: 31, ac: 22, temphp: 25, skills: {athletics: 33}, size: 3},\n    ],\n\n    natureIncarnate:\n    [// True Shapeshifter form\n        {level: 10, mod: 34, ac: 25, temphp: 30, skills: {athletics: 36}, size: 4},\n    ],\n\n    avatar:\n    [// Avatar form\n        {level: 10, mod: 33, ac: 25, temphp: 30, skills: {athletics: 35}, size: 3},\n    ],\n\n    primalHerd:\n    [// Primal Herd form\n        {level: 10, mod: 0, ac: 22, temphp: 20, skills: {athletics: 30}, size: 3},\n    ]\n};\n\nlet skillRefs = {\n    acrobatics: \"acr\",\n    arcana: \"arc\",\n    athletics: \"ath\",\n    crafting: \"cra\",\n    deception: \"dec\",\n    diplomacy: \"dip\",\n    intimidation: \"itm\",\n    medicine: \"med\",\n    nature: \"nat\",\n    occultism: \"occ\",\n    performance: \"prf\",\n    religion: \"rel\",\n    society: \"soc\",\n    stealth: \"ste\",\n    survival: \"sur\",\n    thievery: \"thi\",\n};\n\n// ------------------------------------------------------------------\n// DECLARE VARIABLES\n//\n\n// Dialog variables\nlet content = \"\";\n\n// For token size adjustment\nlet width = 1;\nlet height = 1;\n\n// For stats adjustments\nlet formValue = 0;\nlet origValue = 0;\nlet origSpeeds = {};\nlet origSenses = [];\nlet bypassTo = \"\";\n\nif (!token) {\n    ui.notifications.error(\"Please select a token\"); \n    return; \n}\n\nlet tempHP = actor.data.data.attributes.hp.temp;\nif (!tempHP) {\n    tempHP = 0;\n}\nlet formData = actor.getFlag(\"world\", \"ss_formData\");\nlet isWildShaped = actor.getFlag(\"world\", \"ws_formData\");\nlet levelAttributes;\n\n\n// -------------------------------------------------------------------\n// DECLARE FUNCTIONS\n//--------------------------------------------------------------------\n\nfunction runDialog(dialog, height, width) {\n    if (height) {\n        dialog.options.height = height;\n        dialog.position.height = height;\n    }\n    if (width) {\n        dialog.options.width = width;\n        dialog.position.width = width;\n    }\n    dialog.render(true);\n}   \n\n// -------------------------------------------------------------------\n\nasync function removeCustomMods() {\n    let customMods = Object.keys(actor.data.data.customModifiers)\n    for (let element of customMods) {\n        for (let mod of actor.data.data.customModifiers[element]) {\n            if (mod.name.includes(\"Spellform\")) {\n                await removeMod(element, mod.name)\n            }\n        }\n    }\n}\n\n// -------------------------------------------------------------------\n\nasync function removeMod(type, label) {\n    if (actor.data.data.customModifiers[type]) {\n        await actor.removeCustomModifier(`${type}`, label);\n    }\n}\n\n// -------------------------------------------------------------------\n\nasync function reset(){\n    // back to default image, if we changed it\n    let img = actor.getFlag(\"world\", \"ss_origImg\");\n    if (img) {\n        await token.update({ img });\n        await actor.update({ \"token.img\" : img })\n    }\n\n    // This resets the token size. If you use small-size tokens in your game, delete the '//'s \n    // preceding the next complete 'if' statement. This will ensure Small PCs revert to their \n    // correct size rather than becoming Medium.\n    \n    // if (actor.data.data.traits.size.value == \"med\"){\n    await setSize(1);\n    // } else if (actor.data.data.traits.size.value == \"sm\"){\n    //    setSize(0.5);\n    // };\n\n    // remove all form attributes from token\n    await actor.unsetFlag(\"world\", \"ss_formData\")\n    await actor.unsetFlag(\"world\", \"ss_levelAttributes\")\n\n    // Remove any resistances/weaknesses that were given by transformation\n    let filterOut = actor.data.data.traits.dv.filter(element => \n        !element.label.includes(\"Spellform\"))\n    await actor.update({ \"data.traits.dv\" : filterOut });\n    filterOut = actor.data.data.traits.dr.filter(element => \n        !element.label.includes(\"Spellform\"))\n    await actor.update({ \"data.traits.dr\" : filterOut });\n\n    // reset Speeds and Senses to normal\n    await resetSenses();\n    await resetSpeeds();\n\n    // if tempHP was changed, remove tempHP\n    await resetTempHP();\n\n    // remove any custom bonuses applied from the transformation\n    await removeCustomMods(); \n};\n\n// -------------------------------------------------------------------\n\nasync function resetTempHP() {\n    let oldTempHP = await actor.getFlag(\"world\", \"ss_tempHPChanged\")\n    if (oldTempHP >= 0) {\n        await actor.unsetFlag(\"world\", \"ss_tempHPChanged\")\n        await actor.update({ \"data.attributes.hp.temp\": oldTempHP });\n    }  \n}\n\n// -------------------------------------------------------------------\n\n// If the form has resistances or weaknesses, add them\nasync function applyResistances(formData) {\n    if (formData.resistances) {\n        let resistances = formData.resistances;\n        for (let type in resistances) {\n            if (resistances.hasOwnProperty(type)) {\n                actor.data.data.traits.dr.push({\n                    type: type, \n                    label: `Spellform ${type}`, \n                    value: resistances[type], \n                    exceptions: \"\"\n                })\n            }\n        }\n        // create a copy of the resistances array and set resistances to that, so\n        // it is preserved when game is reloaded (owing to pass by reference)\n        let newResistances = JSON.parse(JSON.stringify(actor.data.data.traits.dr))\n        await actor.update({ \"data.traits.dr\" : newResistances })\n    }\n\n    if (formData.weaknesses) {\n        let weaknesses = formData.weaknesses;\n        for (let type in weaknesses) {\n            if (weaknesses.hasOwnProperty(type)) {\n                actor.data.data.traits.dv.push({\n                    type: type, \n                    label: `Spellform ${type}`, \n                    value: weaknesses[type], \n                    exceptions: \"\"\n                })\n            }\n        }\n        let newWeaknesses = JSON.parse(JSON.stringify(actor.data.data.traits.dv))\n        await actor.update({ \"data.traits.dv\" : newWeaknesses })\n    }\n}\n\n// -------------------------------------------------------------------\n\nasync function resetSpeeds() {\n    let revert = actor.getFlag(\"world\", \"ss_origSpeeds\")\n    await actor.update({ \"data.attributes.speed\" : revert})\n    await actor.unsetFlag(\"world\", \"ss_origSpeeds\")\n}\n\n// -------------------------------------------------------------------\n\nasync function resetSenses() {\n    let revert = actor.getFlag(\"world\", \"ss_origSenses\")\n    await actor.update({ \"data.traits.senses\" : revert})\n    await actor.unsetFlag(\"world\", \"ss_origSenses\")\n}\n\n// -------------------------------------------------------------------\n\n// scales up token depending on the provided size of the new form\nasync function setSize(newSize){ \n    if (formData && formData.size) {\n        token.update({ width: formData.size, height: formData.size });\n        await actor.update({ \"token.width\": formData.size, \"token.height\": formData.size });\n    } else {\n        token.update({ width: newSize, height: newSize });\n        await actor.update({ \"token.width\" : newSize, \"token.height\" : newSize})\n    }\n};\n\n// -------------------------------------------------------------------\n\n// if the form level's skill bonuses are greater than the character's, use those\nasync function skillBonus(levelSkills, baseSkills, formName) {\n    // 'skills' will become an array of the skills the form at this level gives you access to\n    let skills = Object.keys(levelSkills)\n    // for each item of the 'skills' array, find the appropriate skill abbreviation from the \n    // skillrefs array. This logic allows for a single form to grant new values to multiple skills\n    for (let skill of skills) {\n        // Earth/Water elementals get only a bonus to atheltics, Air/Fire only to acrobatics\n        if (formName === \"Earth\" || formName === \"Water\") { skill = \"athletics\"; }\n        else if (formName === \"Air\" || formName === \"Fire\") { skill = \"acrobatics\" }\n        let abbr = skillRefs[skill];\n        origValue = baseSkills[abbr].value // the original value the actor has for that skill\n        formValue = levelSkills[skill] // get the new (form) value of the skill\n\n        if (formValue > origValue) {\n            const formBonus = formValue - origValue;\n            await actor.addCustomModifier(skill, `Spellform ${skill} Bonus`, formBonus, \"untyped\")\n        }\n    }\n}\n\n// -------------------------------------------------------------------\n\n// Change the token's speeds to the form's\nasync function changeSpeeds() {\n    // if there are any changes to speed at this level of the spell, use those\n    if (levelAttributes.speed) {\n        actor.update({ \"data.attributes.speed\" : levelAttributes.speed })\n    } else {  // otherwise use the form's base speeds\n        actor.update({ \"data.attributes.speed\" : formData.speed })\n    }\n}\n\n// Change the token's senses to the form's\nasync function setSenses() {\n    // if there are any changes to senses at this level of the spell, use those\n    if (levelAttributes.senses) {\n        actor.update({ \"data.traits.senses\" : levelAttributes.senses })\n    } else { // otherwise use the form's base senses\n        actor.update({ \"data.traits.senses\" : formData.senses })\n    }\n}\n\n// -------------------------------------------> Main Transform Function Part 1\n\nasync function chooseSpell(spellName, className) {\n    let content2 = `<div style=\"text-align: center\"><div style=\"padding: 2px\"><label for=\"forms\">Choose your form:</label>\n    <select name=\"forms\" id=\"forms\">`\n    for (let formGroup of formGroups) {\n        if (formGroup.group === spellName) {\n            formGroup.forms.forEach(form => {\n                content2 += `<option value=\"${form.name}\" class=\"${formGroup.class}\">${form.name}</option>`\n            })\n        }\n    }\n    content2 += `</select></div>\n\n    <div style=\"padding: 2px\"><label for=\"level\">What level are you casting at?</label>\n    <select name=\"level\" id=\"level\">`\n    for (let scalingArray in scalingAttributes) {\n        if (scalingArray === className) {\n            (scalingAttributes[scalingArray]).forEach(level => {\n                content2 += `<option value=\"${level.level}\">${level.level}</option>`\n            })\n        }\n    }\n    content2 += `</select></div>`\n    content2 += `<div style=\"padding: 2px\"><label for=\"imgchange\" style=\"display: inline-block; vertical-align: middle; position:relative\">\n    Change token image?</label>\n    <input type=\"checkbox\" name=\"imgchange\" id=\"imgchange\" style=\"position: relative; vertical-align:middle\"></div></div>`\n\n    let d2 = new Dialog({\n        title: \"Choose Form\",\n        content: content2,\n        buttons: {\n            select: {\n                icon: \"<i class='fas fa-hand-sparkles'></i>\",\n                label: \"Transform\",\n                callback: async (html) => {\n                    let actualForm = html.find(\"#forms\")[0].value;\n                    let castingLevel = parseInt(html.find(\"#level\")[0].value); \n                    let imgChange = html.find(\"#imgchange\")[0].checked;\n                    chooseForm(actualForm, castingLevel, imgChange, className);\n                }\n            }\n        }\n    })\n    runDialog(d2, null, 300)\n}\n\n// ----------------------------> Main Transform Function Part 2\n\nasync function chooseForm(actualForm, castingLevel, imgChange, className) {\n    if (!formData) { // if actor isn't already transformed ->\n        // add Form Attributes to token for reference\n        for (let group of formGroups) {\n            if (group.class === className) { // find the class in formGroups that matches the formType from the selected option in the dialog\n                formData = (group.forms).find(element => element.name === actualForm)\n                await actor.setFlag(\"world\", \"ss_formData\", formData);\n            }\n        }\n        \n        // add the scaling attributes of our selected form to our token for reference\n        levelAttributes = scalingAttributes[className].find(element => \n            element.level === castingLevel)\n        await actor.setFlag(\"world\", \"ss_levelAttributes\", levelAttributes)\n\n        \n        // if there are any form-specific skills, set those first\n        if (formData.skills) {\n            let formSkills = Object.keys(formData.skills)\n            for (let i = 0; i < formSkills.length; i++) {\n                let modSkill = (Object.values(actor.data.data.skills)).find(element => element.name === formSkills[i])\n                let modValue;\n                if (formData.skills[formSkills[i]] !== modSkill.value) {\n                    modValue = formData.skills[formSkills[i]] - modSkill.value\n                }\n                await actor.addCustomModifier(modSkill.name, \"Spellform Value\", modValue, \"untyped\");\n            }\n        }\n\n        await applyResistances(formData);\n\n        await skillBonus(levelAttributes.skills, actor.data.data.skills, formData.name);\n\n        // if Form AC bonus is greater than base AC, add Form Bonus to AC value\n        formValue = levelAttributes.ac + actor.data.data.details.level.value;\n        origValue = actor.data.data.attributes.ac.value;\n        if (formValue > origValue) {\n            const formACBonus = (formValue - origValue);\n            await actor.addCustomModifier(\"ac\", \"Spellform Bonus AC\", formACBonus, \"untyped\");\n        }\n\n        // if Form Attack Mod is less than Unarmed Attack mod of the actor,\n        // let the form attacks use that instead\n        formValue = levelAttributes.mod\n        if ((actor.data.data.actions).find(action => action.name === \"Handwraps of Mighty Blows\")) {\n            origValue = (actor.data.data.actions).find(action => action.name === \"Handwraps of Mighty Blows\").totalModifier\n        } else {\n            origValue = ((actor.data.data.actions).find(action => action.name === \"Fist\")).totalModifier\n        }\n        if (formValue < origValue) {\n            levelAttributes.ownMod = origValue;\n            await actor.setFlag(\"world\", \"ss_levelAttributes\", levelAttributes)\n        }\n\n        // remember original senses for reset\n        origSenses = JSON.parse(JSON.stringify(actor.data.data.traits.senses));\n        await actor.setFlag(\"world\", \"ss_origSenses\", origSenses);\n        await setSenses();\n\n        // remember original speed for reset\n        origSpeeds = JSON.parse(JSON.stringify(actor.data.data.attributes.speed));\n        await actor.setFlag(\"world\", \"ss_origSpeeds\", origSpeeds);\n        await changeSpeeds();\n\n        // add temp HP, if Form Temp HP value is greater than already extant temp HP value\n        if (!tempHP || (tempHP < levelAttributes.temphp)) {\n            await actor.setFlag(\"world\", \"ss_tempHPChanged\", tempHP)\n            let newTempHP = levelAttributes.temphp\n            await actor.update({ \"data.attributes.hp.temp\": newTempHP });\n        };\n\n        // Change image. Make sure your images are labeled with the form name (w/ correct capitalization)\n        // at the end of your token name.\n        if (imgChange) {\n            let origImg = token.data.img;\n            await actor.setFlag(\"world\", \"ss_origImg\", origImg)\n            let img = origImg.slice(0, -4) + (formData.name) + \".png\";\n            await token.update({ img });\n            await actor.update({ \"token.img\" : img})\n        }\n\n        // Change size\n        if (formData.size) {\n            await setSize(formData.size);\n        } else {\n            await setSize(levelAttributes.size);\n        }\n    } else {\n        ui.notifications.error(\"Please return to normal form before transforming again.\"); \n        return;\n    }\n}\n\n// --------------------------------------------------------------------------\n// INIT\n// --------------------------------------------------------------------------\n\nif (actor.data.type !== \"character\") {\n    ui.notifications.error(\"Please select a player character token.\"); \n    return; \n}\n\nif (isWildShaped) {\n    ui.notifications.error(\"Please use the Wild Shape macro\"); \n    return;\n}\n\n// Populate dropdown with all Form Spells\ncontent += `<div style=\"text-align: center; padding: 0 0 10px\"><label for=\"spells\">What spell are you casting?</label>\n<div style=\"padding: 5px 0 0\"><select name=\"spells\" id=\"spells\">`\nfor (let formGroup of formGroups) {\n    content += `<option value=\"${formGroup.group}\" class=\"${formGroup.class}\">${formGroup.group}</option>`\n}\ncontent += `</select></div></div>`\n\nlet d = new Dialog({\n    title: \"Choose Spell\",\n    content: content,\n    buttons: {\n        spell: {\n            icon: \"<i class='fas fa-arrow-right'></i>\",\n            label: \"Next\",\n            callback: (html) => {\n                if (formData) {\n                    ui.notifications.error(\"Please return to normal form before transforming again.\"); \n                    return;\n                }\n                let spell = html.find(\"#spells\")[0].value;\n                let selected = html.find(\"#spells\")[0].selectedIndex;\n                let className = html.find(\"#spells\")[0].options[selected].className;\n                chooseSpell(spell, className);\n            }\n        },\n        revert: {\n            icon: \"<i class='fas fa-undo'></i>\",\n            label: \"Revert\",\n            callback: () => reset(),\n        }\n    }\n})\nrunDialog(d, null, 250)","author":"TKPF0VhpkrvAyBOK","img":"icons/svg/paralysis.svg","actorIds":[],"_id":"0NflCUApIpROnBXC"}
{"name":"Wild Shape","permission":{"default":0,"TKPF0VhpkrvAyBOK":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.j13w0JbN7BHdUzum"}},"scope":"global","command":"// TODO: See if you can add special form notes (like Sharks only breathing underwater) to Biography\n\n// ----------------------------------------------------------------\n// FORM STATS.\n//\n\nlet formGroups = [ // contains Attack info for the forms\n    {\n        group: \"Wild Shape: Pest Form\", // Doubles as the Feat Name and the Heading under which the form options are displayed in the selection menu\n        class: \"pestForm\", // Used to link to the correct Scaling Attributes group\n        forms: [\n            {\n                name: \"Pest\",\n                weaknesses: {piercing: \"5\", bludgeoning: \"5\", slashing: \"5\"},\n                speed: {value: 10, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\n                skills: {athletics: -4},\n            }\n        ]\n    },\n    {\n        group: \"Wild Shape: Animal Form\", // Doubles as the Feat Name and the Heading under which the form options are displayed in the selection menu\n        class: \"animalForm\", // Used to link to the correct Scaling Attributes group\n        forms: [\n            {\n                name: \"Ape\", \n                attacks: {\n                    \"Fist\": {dsize: 6, dnum: 2, type: \"Bludgeoning\"}\n                }, \n                speed: {value: 30, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"20\", exceptions: \"\"}]}, \n                senses: [{type: \"lowLightVision\",label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\n            }, \n            {\n                name: \"Bear\", \n                attacks: {\n                    \"Jaws\": {dsize: 8, dnum: 2, type: \"Piercing\"},\n                    \"Claw\": {dsize: 8, dnum: 1, type: \"Slashing\", traits: [\"Agile\"]}\n                },\n                speed: {value: 30, special: \"\", otherSpeeds: []}, \n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\n            }, \n            {\n                name: \"Bull\", \n                attacks: {\n                    \"Horn\": {dsize: 8, dnum: 2, type: \"Piercing\"}\n                }, \n                speed: {value: 30, special: \"\", otherSpeeds: []}, \n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\n            },\n            {\n                name: \"Canine\", \n                attacks: {\n                    \"Jaws\": {dsize: 8, dnum: 2, type: \"Piercing\"}\n                },\n                speed: {value: 40, special: \"\", otherSpeeds: []}, \n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\n            },\n            {\n                name: \"Cat\", \n                attacks: {\n                    \"Jaws\": {dsize: 6, dnum: 2, type: \"Piercing\"}, \n                    \"Claw\": {dsize: 10, dnum: 1, type: \"Slashing\", traits: [\"Agile\"]}\n                }, \n                speed: {value: 40, special: \"\", otherSpeeds: []}, \n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\n            },\n            {\n                name: \"Deer\", \n                attacks: {\n                    \"Antler\": {dsize: 6, dnum: 2, type: \"Piercing\"}\n                }, \n                speed: {value: 50, special: \"\", otherSpeeds: []}, \n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\n            },\n            {\n                name: \"Frog\", \n                attacks: {\n                    \"Jaws\": {dsize: 6, dnum: 2, type: \"Bludgeoning\"},\n                    \"Tongue\": {dsize: 4, dnum: 2, type: \"Bludgeoning\", traits: [\"Reach 15 feet\"]}\n                }, \n                speed: {value: 25, special: \"\", otherSpeeds: [{type: \"swim\", label: \"Swim\", value: \"25\", exceptions: \"\"}]}, \n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\n            },\n            {\n                name: \"Shark\", \n                attacks: {\n                    \"Jaws\": {dsize: 8, dnum: 2, type: \"Piercing\"}\n                }, \n                speed: {value: 0, special: \"\", otherSpeeds: [{type: \"swim\", label: \"Swim\", value: \"35\", exceptions: \"\"}]}, \n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\n                details: \"Breathe underwater but not in air.\"\n            },\n            {\n                name: \"Snake\", \n                attacks: {\n                    \"Fangs\": {dsize: 4, dnum: 2, type: \"Piercing\"}\n                }, \n                plusattacks: {\n                    \"Fangs\": {dsize: 6, dnum: 1, type: \"Poison\"}\n                }, // plusattacks add additional damage to the same-name primary attack. Can support multiple different instances of additional damage for the same primary attack.\n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"20\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"20\", exceptions: \"\"}]}, \n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}]\n            } \n        ]\n    },\n    \n    {\n        group: \"Insect Shape\",\n        class: \"insectShape\",\n        forms: [\n            {\n                name: \"Ant\", \n                attacks: {\n                    \"Mandibles\": {dsize: 6, dnum: 2, type: \"Bludgeoning\"}\n                }, \n                speed: {value: 30, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"30\", exceptions: \"\"}]},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Beetle\",\n                attacks: {\n                    \"Mandibles\": {dsize: 10, dnum: 2, type: \"Bludgeoning\"}\n                }, \n                speed: {value: 25, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\n            }, \n            {\n                name: \"Centipede\", \n                attacks: {\n                    \"Mandibles\": {dsize: 8, dnum: 1, type: \"Piercing plus 1d4 persistent Poison\"}\n                }, \n                speed: {value: 25, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"25\", exceptions: \"\"}]},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Mantis\", \n                attacks: {\n                    \"Foreleg\": {dsize: 8, dnum: 2, type: \"Bludgeoning\"}\n                }, \n                speed: {value: 40, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Scorpion\", \n                attacks: {\n                    \"Stinger\": {dsize: 8, dnum: 1, type: \"Piercing plus 1d4 persistent Poison\"},\n                    \"Pincer\": {dsize: 6, dnum: 1, type: \"Bludgeoning\", traits: [\"Agile\"]}\n                }, \n                speed: {value: 40, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"tremorsense\", label: \"Imprecise Tremorsense\", value: \"60\", exceptions: \"\"}],\n            },\n            {\n                name: \"Spider\", \n                attacks: {\n                    \"Fangs\": {dsize: 6, dnum: 1, type: \"Piercing plus 1d4 persistent Poison\"},\n                    \"Web\": {type: \"None\", addEffect: \"No damage. Entangles the target for one round\", traits: [\"Range Increment 20 feet\"]}\n                }, \n                speed: {value: 25, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"25\", exceptions: \"\"}]},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n        ]\n    }, \n    \n    { \n        group: \"Soaring Shape\",\n        class: \"soaringShape\",\n        forms: [\n            {\n                name: \"Bat\", \n                attacks: {\n                    \"Fangs\": {dsize: 8, dnum: 2, type: \"Piercing\"},\n                    \"Wing\": {dsize: 6, dnum: 2, type: \"Bludgeoning\", traits: [\"Agile\"]}\n                }, \n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"30\", exceptions: \"\"}]},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"echolocation\", label: \"Precise Echolocation\", value: \"40\", exceptions: \"\"}],\n            }, \n            {\n                name: \"Bird\", \n                attacks: {\n                    \"Beak\": {dsize: 8, dnum: 2, type: \"Piercing\"},\n                    \"Talon\": {dsize: 10, dnum: 1, type: \"Slashing\", traits: [\"Agile\"]}\n                }, \n                speed: {value: 10, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"50\", exceptions: \"\"}]},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\n            }, \n            {\n                name: \"Pterosaur\", \n                attacks: {\n                    \"Beak\": {dsize: 6, dnum: 3, type: \"Piercing\"}\n                }, \n                extraFeat: \"Ferocious Shape\", \n                speed: {value: 10, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"40\", exceptions: \"\"}]},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\n            },\n            {\n                name: \"Wasp\", \n                attacks: {\n                    \"Stinger\": {dsize: 8, dnum: 1, type: \"Piercing plus 1d6 persistent Poison\"}\n                }, \n                extraFeat: \"Insect Shape\", \n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"40\", exceptions: \"\"}]},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\n            },\n        ]\n    },\n    \n    { \n        group: \"Ferocious Shape\",\n        class: \"ferociousShape\",\n        forms: [\n            {\n                name: \"Ankylosaurus\", \n                attacks: {\n                    \"Tail\": {dsize: 6, dnum: 2, type: \"Bludgeoning\", traits: [\"Back Swing\", \"Reach 10 feet\"]},\n                    \"Foot\": {dsize: 6, dnum: 2, type: \"Bludgeoning\"}\n                }, \n                speed: {value: 25, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\n            }, \n            {\n                name: \"Brontosaurus\", \n                attacks: {\n                    \"Tail\": {dsize: 6, dnum: 2, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]},\n                    \"Foot\": {dsize: 8, dnum: 2, type: \"Bludgeoning\"}\n                }, \n                speed: {value: 25, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\n            }, \n            {\n                name: \"Deinonychus\", \n                attacks: {\n                    \"Talon\": {dsize: 4, dnum: 2, type: \"Piercing plus 1 persistent Bleed\", traits: [\"Agile\"]},\n                    \"Jaws\": {dsize: 10, dnum: 1, type: \"Piercing\"}\n                }, \n                speed: {value: 40, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\n            },\n            {\n                name: \"Stegosaurus\", \n                attacks: {\n                    \"Tail\": {dsize: 8, dnum: 2, type: \"Piercing\", traits: [\"Back Swing\", \"Reach 10 feet\"]}\n                }, \n                speed: {value: 30, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\n            },\n            {\n                name: \"Triceratops\", \n                attacks: {\n                    \"Horn\": {dsize: 8, dnum: 2, type: \"Piercing\", addEffect: \"1d6 persistent Bleed on a Crit\"}, \n                    \"Foot\": {dsize: 6, dnum: 2, type: \"Bludgeoning\"}\n                }, \n                speed: {value: 30, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\n            },\n            {\n                name: \"Tyrannosaurus\", \n                attacks: {\n                    \"Jaws\": {dsize: 12, dnum: 1, type: \"Piercing\", traits: [\"Deadly\", \"Reach 10 feet\"]}, \n                    \"Tail\": {dsize: 10, dnum: 1, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}\n                }, \n                speed: {value: 30, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"30\", exceptions: \"\"}],\n            },\n        ]\n    },\n    \n    { \n        group: \"Elemental Shape\",\n        class: \"elementalShape\",\n        forms: [\n            {\n                name: \"Air\", \n                attacks: {\n                    \"Gust\": {dsize: 4, dnum: 1, type: \"Bludgeoning\"}\n                }, \n                speed: {value: 0, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"80\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            }, \n            {\n                name: \"Earth\", \n                attacks: {\n                    \"Fist\": {dsize: 10, dnum: 2, type: \"Bludgeoning\"}\n                }, \n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"burrow\", label: \"Burrow\", value: \"20\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            }, \n            {\n                name: \"Fire\", \n                attacks: {\n                    \"Tendril\": {dsize: 8, dnum: 1, type: \"Fire plus 1d4 persistent Fire\"}\n                }, \n                resistances: {fire: 10}, \n                weaknesses: {cold: 5, water: 5}, \n                speed: {value: 50, special: \"\", otherSpeeds: []},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n            {\n                name: \"Water\", \n                attacks: {\n                    \"Wave\": {dsize: 12, dnum: 1, type: \"Bludgeoning\", addEffect: \"You can spend an action immediately after a hit to push the target 5 feet with the effects of a successful Shove\"}\n                }, \n                resistances: {fire: 5}, \n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"swim\", label: \"Swim\", value: \"60\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            },\n        ]\n    },\n    \n    { \n        group: \"Plant Shape\",\n        class: \"plantShape\",\n        forms: [\n            {\n                name: \"Arboreal\", \n                attacks: {\n                    \"Branch\": {dsize: 10, dnum: 2, type: \"Bludgeoning\", traits: [\"Reach 15 feet\"]},\n                    \"Foot\": {dsize: 8, dnum: 2, type: \"Bludgeoning\"}\n                }, \n                resistances: {poison: 10}, \n                speed: {value: 30, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\n                details: \"You can speak in this form, but you still can't Cast a Spell or supply verbal components.\"\n            }, \n            {\n                name: \"Flytrap\", \n                attacks: {\n                    \"Leaf\": {dsize: 8, dnum: 2, type: \"Piercing\", traits: [\"Reach 10 feet\"], addEffect: \"You can spend an action after a hit to Grab the target\"}\n                }, \n                resistances: {poison: 10, acid: 10}, \n                speed: {value: 15, special: \"\", otherSpeeds: []},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\n            }, \n            {\n                name: \"Shambler\", \n                attacks: {\n                    \"Vine\": {dsize: 8, dnum: 2, type: \"Slashing\", traits: [\"Reach 15 feet\"]}\n                }, \n                resistances: {poison: 10, electricity: 10}, \n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"swim\", label: \"Swim\", value: \"20\", exceptions: \"\"}]},\n                senses: [{type: \"lowLightVision\", label: \"Low-Light Vision\", value: \"\", exceptions: \"\"}],\n            },\n        ]\n    },\n    \n    { \n        group: \"Dragon Shape\",\n        class: \"dragonShape\",\n        forms: [\n            {\n                name: \"Black\", \n                attacks: {\n                    \"Jaws\": {dsize: 12, dnum: 2, type: \"Piercing\"}, \n                    \"Claw\": {dsize: 10, dnum: 3, type: \"Slashing\", traits: [\"Agile\"]}, \n                    \"Tail\": {dsize: 10, dnum: 3, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}, \n                    \"Horns\": {dsize: 8, dnum: 3, type: \"Piercing\", traits: [\"Reach 10 feet\"]}\n                }, \n                plusattacks: {\n                    \"Jaws\": {dsize: 6, dnum: 2, type: \"Acid\"}\n                }, \n                resistances: {acid: 10}, \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"60\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\n            }, \n            {\n                name: \"Blue\", \n                attacks: {\n                    \"Jaws\": {dsize: 10, dnum: 2, type: \"Piercing\"}, \n                    \"Claw\": {dsize: 10, dnum: 3, type: \"Slashing\", traits: [\"Agile\"]}, \n                    \"Tail\": {dsize: 10, dnum: 3, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}, \n                    \"Horns\": {dsize: 8, dnum: 3, type: \"Piercing\", traits: [\"Reach 10 feet\"]}\n                }, \n                plusattacks: {\n                    \"Jaws\": {dsize: 12, dnum: 1, type: \"Electricity\"}\n                }, \n                resistances: {electricity: 10}, \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"burrow\", label: \"Burrow\", value: \"20\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\n            }, \n            {\n                name: \"Brass\", \n                attacks: {\n                    \"Jaws\": {dsize: 8, dnum: 3, type: \"Piercing\"},\n                    \"Claw\": {dsize: 10, dnum: 3, type: \"Slashing\", traits: [\"Agile\"]},\n                    \"Tail\": {dsize: 10, dnum: 3, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}, \n                    \"Spikes\": {dsize: 8, dnum: 3, type: \"Piercing\", traits: [\"Reach 10 feet\"]}\n                }, \n                plusattacks: {\n                    \"Jaws\": {dsize: 4, dnum: 2, type: \"Fire\"}, \n                },\n                resistances: {fire: 10}, \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"burrow\", label: \"Burrow\", value: \"20\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\n            },\n            {\n                name: \"Bronze\", \n                attacks: {\n                    \"Jaws\": {dsize: 10, dnum: 2, type: \"Piercing\"},\n                    \"Claw\": {dsize: 10, dnum: 3, type: \"Slashing\", traits: [\"Agile\"]}, \n                    \"Tail\": {dsize: 10, dnum: 3, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}, \n                    \"Wing\": {dsize: 8, dnum: 3, type: \"Slashing\", traits: [\"Reach 10 feet\"]}\n                }, \n                plusattacks: {\n                    \"Jaws\": {dsize: 12, dnum: 1, type: \"Electricity\"}\n                }, \n                resistances: {electricity: 10}, \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"40\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\n            },\n            {\n                name: \"Copper\", \n                attacks: {\n                    \"Jaws\": {dsize: 12, dnum: 2, type: \"Piercing\"},\n                    \"Claw\": {dsize: 10, dnum: 3, type: \"Slashing\", traits: [\"Agile\"]}, \n                    \"Tail\": {dsize: 10, dnum: 3, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}, \n                    \"Wing\": {dsize: 8, dnum: 3, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}\n                }, \n                plusattacks: {\n                    \"Jaws\": {dsize: 6, dnum: 2, type: \"Acid\"}\n                }, \n                resistances: {acid: 10}, \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"climb\", label: \"Climb\", value: \"25\", exceptions: \"on stone only\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\n            },\n            {\n                name: \"Gold\", \n                attacks: {\n                    \"Jaws\": {dsize: 12, dnum: 2, type: \"Piercing\"}, \n                    \"Claw\": {dsize: 6, dnum: 4, type: \"Slashing\", traits: [\"Agile\"]}, \n                    \"Tail\": {dsize: 10, dnum: 3, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}, \n                    \"Horns\": {dsize: 8, dnum: 3, type: \"Piercing\", traits: [\"Reach 10 feet\"]}\n                }, \n                plusattacks: {\n                    \"Jaws\": {dsize: 6, dnum: 2, type: \"Fire\"}\n                }, \n                resistances: {fire: 10}, \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"40\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\n            },\n            {\n                name: \"Green\", \n                attacks: {\n                    \"Jaws\": {dsize: 12, dnum: 2, type: \"Piercing\"}, \n                    \"Claw\": {dsize: 10, dnum: 3, type: \"Slashing\", traits: [\"Agile\"]}, \n                    \"Tail\": {dsize: 10, dnum: 3, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}, \n                    \"Horns\": {dsize: 8, dnum: 3, type: \"Piercing\", traits: [\"Reach 10 feet\"]}\n                }, \n                plusattacks: {\n                    \"Jaws\": {dsize: 6, dnum: 2, type: \"Poison\"}\n                }, \n                resistances: {poison: 10}, \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"40\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\n            },\n            {\n                name: \"Red\", \n                attacks: {\n                    \"Jaws\": {dsize: 12, dnum: 2, type: \"Piercing\"}, \n                    \"Claw\": {dsize: 6, dnum: 4, type: \"Slashing\", traits: [\"Agile\"]}, \n                    \"Tail\": {dsize: 10, dnum: 3, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}, \n                    \"Wing\": {dsize: 8, dnum: 3, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}\n                }, \n                plusattacks: {\n                    \"Jaws\": {dsize: 6, dnum: 2, type: \"Fire\"}\n                }, \n                resistances: {fire: 10}, \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\n            },\n            {\n                name: \"Silver\", \n                attacks: {\n                    \"Jaws\": {dsize: 12, dnum: 2, type: \"Piercing\"}, \n                    \"Claw\": {dsize: 10, dnum: 3, type: \"Slashing\", traits: [\"Agile\"]}, \n                    \"Tail\": {dsize: 10, dnum: 3, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}\n                }, \n                plusattacks: {\n                    \"Jaws\": {dsize: 6, dnum: 2, type: \"Cold\"}\n                }, \n                resistances: {cold: 10}, \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\n            }, \n            {\n                name: \"White\", \n                attacks: {\n                    \"Jaws\": {dsize: 6, dnum: 3, type: \"Piercing\"}, \n                    \"Claw\": {dsize: 10, dnum: 3, type: \"Slashing\", traits: [\"Agile\"]}, \n                    \"Tail\": {dsize: 10, dnum: 3, type: \"Bludgeoning\", traits: [\"Reach 10 feet\"]}\n                }, \n                plusattacks: {\n                    \"Jaws\": {dsize: 6, dnum: 2, type: \"Cold\"}\n                }, \n                resistances: {cold: 10}, \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"100\", exceptions: \"\"}, {type: \"climb\", label: \"Climb\", value: \"25\", exceptions: \"on ice only\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}, {type: \"scent\", label: \"Imprecise Scent\", value: \"60\", exceptions: \"\"}],\n            },\n        ]\n    },\n    \n    {\n        group: \"Monstrosity Shape\",\n        class: \"monstrosityShape\",\n        forms: [ \n            {\n                name: \"Phoenix\", \n                attacks: {\n                    \"Beak\": {dsize: 6, dnum: 2, type: \"Piercing plus 2d4 persistent Fire\", bonus: 12, traits: [\"Reach 15 feet\"]},\n                    \"Talon\": {dsize: 8, dnum: 2, type: \"Slashing\", bonus: 12, traits: [\"Agile\", \"Reach 15 feet\"]}\n                }, \n                plusattacks: {\n                    \"Beak\": {dsize: 4, dnum: 2, type: \"Fire\"}\n                }, \n                extraFeat: \"Soaring Shape\", \n                speed: {value: 30, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"90\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n                details: \"<strong>Shroud of Flame</strong> (aura, evocation, fire, primal) 20 feet. You gain an aura of fire that extends out from you. A creature that enters or ends its turn within the aura takes 2d6 fire damage. A creature can take this damage only once per turn. You can use a single action, which has the concentrate trait, to activate or deactivate this aura.\"\n            }, \n            {\n                name: \"Purple Worm\", \n                attacks: {\n                    \"Jaws\": {dsize: 12, dnum: 2, type: \"Piercing\", bonus: 20, traits: [\"Reach 10 feet\"]},\n                    \"Stinger\": {dsize: 8, dnum: 2, type: \"Piercing plus 2d6 persistent Poison\", bonus: 15, traits: [\"Agile\", \"Reach 10 feet\"]},\n                    \"Body\": {dsize: 8, dnum: 2, type: \"Bludgeoning\", bonus: 20, traits: [\"Reach 10 feet\"]}\n                }, \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"burrow\", label: \"Burrow\", value: \"30\", exceptions: \"\"}, {type: \"swim\", label: \"Swim\", value: \"20\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n                details: \"<strong>Inexorable</strong> You automatically recover from the paralyzed, slowed, and stunned conditions at the end of each of your turns. You're also immune to being immobilized and ignore difficult terrain and greater difficult terrain.\"\n            }, \n            {\n                name: \"Sea Serpent\", \n                attacks: {\n                    \"Jaws\": {dsize: 12, dnum: 2, type: \"Piercing\", bonus: 20, traits: [\"Reach 15 feet\"]},\n                    \"Tail\": {dsize: 8, dnum: 2, type: \"Bludgeoning\", bonus: 20, traits: [\"Reach 25 feet\"]}\n                }, \n                speed: {value: 20, special: \"\", otherSpeeds: [{type: \"swim\", label: \"Swim\", value: \"90\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n            }, \n        ]\n    },\n\n    {\n        group: \"True Shapeshifter\",\n        class: \"trueShapeshifter\",\n        forms: [ \n            {\n                name: \"Green Man\", \n                attacks: {\n                    \"Vines\": {dsize: 8, dnum: 6, type: \"Bludgeoning\", bonus: 12, traits: [\"Reach 30 feet\", \"Versatile P\"]},\n                    \"Thorns\": {dsize: 6, dnum: 6, type: \"Piercing\", bonus: 6, traits: [\"Range 100 feet\"]}\n                }, \n                extraFeat: \"Plant Shape\", \n                speed: {value: 40, special: \"\", otherSpeeds: [{type: \"climb\", label: \"Climb\", value: \"40\", exceptions: \"\"}]},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n                size: 1,\n                details: \"<strong>Green Caress</strong> (aura, primal, transmutation) 60 feet. Enemies other than plants must succeed at a Fortitude save against your spell DC or become clumsy 1 for 1 round (clumsy 2 on a critical failure).\" \n            },\n            {\n                name: \"Kaiju\", \n                attacks: {\n                    \"Jaws\": {dsize: 10, dnum: 6, type: \"Piercing\", bonus: 10, traits: [\"Reach 30 feet\"]},\n                    \"Claws\": {dsize: 8, dnum: 6, type: \"Slashing\", bonus: 8, traits: [\"Agile\", \"Reach 30 feet\"]},\n                    \"Foot\": {dsize: 6, dnum: 6, type: \"Bludgeoning\", bonus: 10, traits: [\"Agile\", \"Reach 15 feet\"]}\n                }, \n                resistances: {piercing: 5, bludgeoning: 5, slashing: 5}, \n                speed: {value: 50, special: \"\", otherSpeeds: []},\n                senses: [{type: \"darkvision\", label: \"Darkvision\", value: \"\", exceptions: \"\"}],\n                details: \"<strong>Unstoppable</strong> You are immune to being immobilized and ignore difficult terrain and greater difficult terrain.\"\n            }, \n        ]\n    },\n];\n\nlet scalingAttributes = { // for sizes, 1 is Medium, 2 is Large, 3 is Huge, 4 is Gargantuan\n    pestForm: // corresponds to the \"class\" of the formGroups above. Used to link the chosen form to the correct statistics for the level it's being cast at\n    [// Pest Form\n        {level: 1, mod: 0, ac: 15, temphp: 0, damage: 0, skills: {stealth: 10, acrobatics: 10}, size: 0.25},\n        {level: 4, mod: 0, ac: 15, temphp: 0, damage: 0, skills: {stealth: 10, acrobatics: 10}, size: 0.25, \n            speed: {value: 10, special: \"\", otherSpeeds: [{type: \"fly\", label: \"Fly\", value: \"20\", exceptions: \"\"}]}\n        },\n    ],\n\n    animalForm:\n    [// Animal Forms\n        {level: 2, mod: 9, ac: 16, temphp: 5, damage: 1, skills: {athletics: 9}, size: 1},\n        {level: 3, mod: 14, ac: 17, temphp: 10, damage: 5, skills: {athletics: 14}, size: 1},\n        {level: 4, mod: 16, ac: 18, temphp: 15, damage: 9, skills: {athletics: 16}, size: 2},\n        {level: 5, mod: 18, ac: 18, temphp: 20, damage: 7, skills: {athletics: 20}, size: 3, double: true}\n    ],\n    \n    insectShape:\n    [// Insect Forms\n        {level: 3, mod: 13, ac: 18, temphp: 10, damage: 2, skills: {athletics: 13}, size: 1},\n        {level: 4, mod: 16, ac: 18, temphp: 15, damage: 6, skills: {athletics: 16}, size: 2},\n        {level: 5, mod: 18, ac: 18, temphp: 20, damage: 2, skills: {athletics: 20}, size: 3, double: true},\n    ],\n\n    soaringShape:\n    [// Soaring Forms\n        {level: 4, mod: 16, ac: 18, temphp: 5, damage: 5, skills: {acrobatics: 16}, size: 1},\n        {level: 5, mod: 18, ac: 18, temphp: 10, damage: 8, skills: {acrobatics: 20}, size: 2},\n        {level: 6, mod: 21, ac: 21, temphp: 15, damage: 4, skills: {acrobatics: 23}, size: 3, double: true},\n    ],\n\n    ferociousShape:\n    [// Ferocious Forms\n        {level: 4, mod: 16, ac: 18, temphp: 15, damage: 9, skills: {athletics: 18}, size: 2},\n        {level: 5, mod: 18, ac: 18, temphp: 20, damage: 6, skills: {athletics: 21}, size: 3, double: true},\n        {level: 7, mod: 25, ac: 21, temphp: 25, damage: 15, skills: {athletics: 25}, size: 4, double: true},\n    ],\n\n    elementalShape:\n    [// Elemental Forms\n        {level: 5, mod: 18, ac: 18, temphp: 10, damage: 9, skills: {athletics: 20, acrobatics: 20}, size: 1},\n        {level: 6, mod: 23, ac: 22, temphp: 15, damage: 13, skills: {athletics: 23, acrobatics: 20}, size: 2},\n        {level: 7, mod: 25, ac: 22, temphp: 20, damage: 11, skills: {athletics: 25, acrobatics: 20}, size: 3, double: true},\n    ],\n\n    plantShape:\n    [// Plant Forms\n        {level: 5, mod: 17, ac: 19, temphp: 12, damage: 11, skills: {athletics: 19}, size: 2},\n        {level: 6, mod: 21, ac: 22, temphp: 24, damage: 16, skills: {athletics: 22}, size: 3},\n    ],\n\n    dragonShape:\n    [// Dragon Forms\n        {level: 6, mod: 22, ac: 18, temphp: 10, damage: 6, skills: {athletics: 23}, size: 2},\n        {level: 8, mod: 28, ac: 21, temphp: 15, damage: 12, skills: {athletics: 28}, size: 3},\n    ],\n\n    monstrosityShape:\n    [// Monstrosity Forms\n        {level: 8, mod: 28, ac: 20, temphp: 20, skills: {athletics: 30}, size: 3},\n        {level: 9, mod: 31, ac: 22, temphp: 25, skills: {athletics: 33}, size: 3},\n    ],\n\n    trueShapeshifter:\n    [// True Shapeshifter form\n        {level: 10, mod: 34, ac: 25, temphp: 30, skills: {athletics: 36}, size: 4},\n    ]\n};\n\nlet skillRefs = {\n    acrobatics: \"acr\",\n    arcana: \"arc\",\n    athletics: \"ath\",\n    crafting: \"cra\",\n    deception: \"dec\",\n    diplomacy: \"dip\",\n    intimidation: \"itm\",\n    medicine: \"med\",\n    nature: \"nat\",\n    occultism: \"occ\",\n    performance: \"prf\",\n    religion: \"rel\",\n    society: \"soc\",\n    stealth: \"ste\",\n    survival: \"sur\",\n    thievery: \"thi\",\n};\n\n// ------------------------------------------------------------------\n// DECLARE VARIABLES\n// ------------------------------------------------------------------\n\n// Dialog variable\nlet content = \"\";\n\n// For token size adjustment\nlet width = 1;\nlet height = 1;\n\n// For stats adjustments\nlet formValue = 0;\nlet origValue = 0;\nlet origSpeeds = {};\nlet origSenses = [];\nlet length = 0;\n\nif (!token) {\n    ui.notifications.error(\"Please select a token\"); \n    return; \n}\nlet tempHP = actor.data.data.attributes.hp.temp;\nif (!tempHP) {\n    tempHP = 0;\n}\nlet formData = actor.getFlag(\"world\", \"ws_formData\");\nlet isSpellShaped = actor.getFlag(\"world\", \"ss_formData\");\nlet levelAttributes;\nlet heightenedLevel = Math.ceil((actor.data.data.details.level.value) / 2); \n\n\n// -------------------------------------------------------------------\n// DECLARE FUNCTIONS\n// -------------------------------------------------------------------\n\n//TODO: UNFINISHED\n\n// function addFormDetails() {\n//     if (formData.details) {\n//         let bio = actor.data.data.details.biography.value;\n//         let addedDetails = `<div id=\"formDetails\"><h2>Form Details:</h2>${formData.details}</div>`\n//         length = addedDetails.length\n//         console.log(length);\n//         bio += addedDetails\n//         actor.update({ \"data.details.biography.value\" : bio })\n//     }\n// }\n\n// function removeFormDetails() {\n//     console.log(\"running remove form details)\")\n//     let bio = actor.data.data.details.biography.value;\n//     console.log(\"bio=\" + bio)\n//     let startpoint = bio.search('<div id=\"formDetails\">')\n//     console.log(\"startpoint=\" + startpoint)\n//     let bioBefore = bio.slice(0, startpoint)\n//     console.log(\"bioBefore=\" + bioBefore)\n//     console.log(\"detailsLength=\" + length);\n//     let bioAfter = bio.slice((startpoint + length), bio.length)\n//     console.log(\"bioAfter=\" + bioAfter)\n//     bio = bioBefore + bioAfter;\n//     console.log(\"bioupdated=\" + bio)\n//     actor.update({ \"data.details.biography.value\" : bio })\n// }\n\nfunction runDialog(dialog, height, width) {\n    if (height) {\n        dialog.options.height = height;\n        dialog.position.height = height;\n    }\n    if (width) {\n        dialog.options.width = width;\n        dialog.position.width = width;\n    }\n    dialog.render(true);\n}   \n\n// -------------------------------------------------------------------\n\nasync function removeCustomMods() {\n    let customMods = Object.keys(actor.data.data.customModifiers)\n    for (let element of customMods) {\n        for (let mod of actor.data.data.customModifiers[element]) {\n            if (mod.name.includes(\"WSForm\")) {\n                await removeMod(element, mod.name)\n            }\n        }\n    }\n}\n\n// -------------------------------------------------------------------\n\nasync function removeMod(type, label) {\n    if (actor.data.data.customModifiers[type]) {\n        await actor.removeCustomModifier(`${type}`, label);\n    }\n}\n\n// -------------------------------------------------------------------\n\nasync function reset(){\n    // back to default image, if we changed it\n    let img = actor.getFlag(\"world\", \"ws_origImg\");\n    if (img) {\n        await token.update({ img });\n        await actor.update({ \"token.img\" : img })\n    }\n\n    // This resets the token size. If you use small-size tokens in your game, delete the '//'s \n    // preceding the next complete 'if' statement. This will ensure Small PCs revert to their \n    // correct size rather than becoming Medium.\n    \n    // if (actor.data.data.traits.size.value === \"med\"){\n    await setSize(1);\n    // } else if (actor.data.data.traits.size.value === \"sm\"){\n    //    await setSize(0.5);\n    // };\n\n    // remove all form attributes from token\n    await actor.unsetFlag(\"world\", \"ws_formData\")\n    await actor.unsetFlag(\"world\", \"ws_levelAttributes\")\n\n    // Remove any resistances/weaknesses that were given by transformation\n    let filterOut = actor.data.data.traits.dv.filter(element => \n        !element.label.includes(\"WSForm\"))\n    await actor.update({ \"data.traits.dv\" : filterOut });\n    filterOut = actor.data.data.traits.dr.filter(element => \n        !element.label.includes(\"WSForm\"))\n    await actor.update({ \"data.traits.dr\" : filterOut });\n\n    // reset Speeds and Senses to normal\n    await resetSenses();\n    await resetSpeeds();\n\n    // if tempHP was changed, remove tempHP\n    await resetTempHP();\n\n    // remove any custom bonuses applied from the transformation\n    await removeCustomMods();\n\n    // removeFormDetails();\n};\n\n// -------------------------------------------------------------------\n\nasync function resetTempHP() {\n    let oldTempHP = await actor.getFlag(\"world\", \"ws_tempHPChanged\")\n    if (oldTempHP >= 0) {\n        await actor.unsetFlag(\"world\", \"ws_tempHPChanged\")\n        await actor.update({ \"data.attributes.hp.temp\": oldTempHP });\n    }  \n}\n\n// -------------------------------------------------------------------\n\n// Apply wide ranging bonuses gained from having specific wild shape feats\nasync function featCheck(formData, formType){\n    // If the actor has the feat, and is not transforming into one of the forms granted\n    // by that feat, they get the appropriate resistance\n    if (wsFeats.includes(\"Elemental Shape\") && formType !== \"elementalShape\") {\n        // if the form doesn't have any resistances, add fire resistance 5\n        if (!formData.resistances) {\n            formData.resistances = {fire: 5};\n        // if the form has resistances, but no fire resistance, OR if they have fire resistance,\n        // but not fire resistance of 5 or greater, they have fire resistance 5\n        } else if (!formData.resistances.fire || (formData.resistances.fire && (formData.resistances.fire < 5))) {\n            formData.resistances.fire = 5\n        }\n    }\n\n    // same logic as for plant form\n    if (wsFeats.includes(\"Plant Shape\") && formType !== \"plantShape\") {\n        if (!formData.resistances) {\n            formData.resistances = {poison: 5};\n        } else if (!formData.resistances.poison || (formData.resistances.poison && (formData.resistances.poison < 5))) {\n            formData.resistances.poison = 5\n        }\n    }\n\n    if (wsFeats.includes(\"Dragon Shape\") && formType !== \"dragonShape\") {\n        dragonResistance();\n    }\n}\n\n// -------------------------------------------------------------------\n\n// If the form has resistances or weaknesses, add them\nasync function applyResistances(formData) {\n    if (formData.resistances) {\n        let resistances = formData.resistances;\n        for (let type in resistances) {\n            if (resistances.hasOwnProperty(type)) {\n                actor.data.data.traits.dr.push({\n                    type: type, \n                    label: `WSForm ${type}`, \n                    value: resistances[type], \n                    exceptions: \"\"\n                })\n            }\n        }\n\n        // create a copy of the resistances array and set resistances to that, so\n        // it is preserved when game is reloaded (owing to pass by reference)\n        let newResistances = JSON.parse(JSON.stringify(actor.data.data.traits.dr))\n        await actor.update({ \"data.traits.dr\" : newResistances })\n    }\n\n    if (formData.weaknesses) {\n        let weaknesses = formData.weaknesses;\n        for (let type in weaknesses) {\n            if (weaknesses.hasOwnProperty(type)) {\n                actor.data.data.traits.dv.push({\n                    type: type, \n                    label: `WSForm ${type}`, \n                    value: weaknesses[type], \n                    exceptions: \"\"\n                })\n            }\n        }\n        let newWeaknesses = JSON.parse(JSON.stringify(actor.data.data.traits.dv))\n        await actor.update({ \"data.traits.dv\" : newWeaknesses })\n    }\n}\n\n// -------------------------------------------------------------------\n\nasync function resetSpeeds() {\n    let revert = actor.getFlag(\"world\", \"ws_origSpeeds\")\n    await actor.update({ \"data.attributes.speed\" : revert})\n    await actor.unsetFlag(\"world\", \"ws_origSpeeds\")\n}\n\n// -------------------------------------------------------------------\n\nasync function resetSenses() {\n    let revert = actor.getFlag(\"world\", \"ws_origSenses\")\n    await actor.update({ \"data.traits.senses\" : revert})\n    await actor.unsetFlag(\"world\", \"ws_origSenses\")\n}\n\n// -------------------------------------------------------------------\n\n// scales up token depending on the provided size of the new form\nasync function setSize(newSize){ \n    if (formData && formData.size) {\n        token.update({ width: formData.size, height: formData.size });\n        await actor.update({ \"token.width\": formData.size, \"token.height\": formData.size });\n    } else {\n        token.update({ width: newSize, height: newSize });\n        await actor.update({ \"token.width\" : newSize, \"token.height\" : newSize})\n    }\n};\n\n// -------------------------------------------------------------------\n\n// if the form level's skill bonuses are greater than the character's, use those\n// apply any feat bonuses if applicable\nasync function skillBonus(levelSkills, baseSkills, formName) {\n    // 'skills' will become an array of the skills the form at this level gives you access to\n    let skills = Object.keys(levelSkills)\n    // for each item of the 'skills' array, find the appropriate skill abbreviation from the \n    // skillrefs array. This logic allows for a single form to grant new values to multiple skills\n    for (let skill of skills) {\n        // Earth/Water elementals get only a bonus to atheltics, Air/Fire only to acrobatics\n        if (formName === \"Earth\" || formName === \"Water\") { skill = \"athletics\"; }\n        else if (formName === \"Air\" || formName === \"Fire\") { skill = \"acrobatics\" }\n        let abbr = skillRefs[skill];\n        origValue = baseSkills[abbr].value // the original value the actor has for that skill\n        formValue = levelSkills[skill] // get the new (form) value of the skill\n\n        if (formValue > origValue) {\n            const formBonus = formValue - origValue;\n            await actor.addCustomModifier(skill, `WSForm ${skill} Bonus`, formBonus, \"untyped\")\n        }\n        if (wsFeats.includes(\"Ferocious Shape\") && skill === \"athletics\") {\n            await actor.addCustomModifier(\"athletics\", \"WSForm Ferocious Bonus\", 1, \"status\");\n        }\n        if (wsFeats.includes(\"Soaring Shape\") && skill === \"acrobatics\") {\n            await actor.addCustomModifier(\"acrobatics\", \"WSForm Soaring Bonus\", 1, \"status\");\n        }\n    }\n}\n\n// -------------------------------------------------------------------\n\n// if the druid has Dragon Shape, this will pop up a dialog to choose your resistance when transforming\n// into a non-Dragon form\nasync function dragonResistance() {\n    let content2 = \"\";\n    content2 += `<div style=\"text-align: center\"><label for=\"resistance\">Choose your resistance:</label>\n                        <select name=\"resistance\" id=\"resistance\" style=\"margin: 5px 0\">\n                        <option value=\"acid\">Acid</option>\n                        <option value=\"cold\">Cold</option>\n                        <option value=\"electricity\">Electricity</option>\n                        <option value=\"fire\">Fire</option>\n                        <option value=\"poison\">Poison</option></select></div>`\n    let d2 = new Dialog({\n        title: \"Draconic Resistance\",\n        content: content2,\n        buttons: {\n            select: {\n                icon: \"<i class='fas fa-dragon'></i>\",\n                label: \"Select\",\n                callback: async (html) => {\n                    let type = html.find(\"#resistance\")[0].value;\n                    if (!formData.resistances) {\n                        formData.resistances = {[type]: 5};\n                    } else if (!formData.resistances[type] || \n                        ((formData.resistances[type]) && (formData.resistances[type]<5))) {\n                        formData.resistances[type] = 5\n                    }\n                    await applyResistances(formData);\n                }\n            },\n        }\n    })\n    runDialog(d2, 135, 210);\n}\n\n// -------------------------------------------------------------------\n\n// Change the token's speeds to the form's\nasync function changeSpeeds() {\n    // if there are any changes to speed at this level of the spell, use those\n    if (levelAttributes.speed) {\n        await actor.update({ \"data.attributes.speed\" : levelAttributes.speed })\n    } else {  // otherwise use the form's base speeds\n        await actor.update({ \"data.attributes.speed\" : formData.speed })\n    }\n}\n\n// -------------------------------------------------------------------\n\n// Change the token's senses to the form's\nasync function setSenses() {\n    // if there are any changes to senses at this level of the spell, use those\n    if (levelAttributes.senses) {\n        await actor.update({ \"data.traits.senses\" : levelAttributes.senses })\n    } else { // otherwise use the form's base senses\n        await actor.update({ \"data.traits.senses\" : formData.senses })\n    }\n}\n\n// ----------------------------------------------------> Main Transform Function\n\nasync function transform(html) {\n        if (!formData) { // if actor isn't already transformed ->\n            let castingLevel = html.find(\"#level\")[0].value;\n            let formType = html.find('#forms')[0].selectedOptions[0].className;\n            let actualForm = html.find('#forms')[0].value;\n\n            // Set up level variables\n            let maxLevel = scalingAttributes[formType][scalingAttributes[formType].length - 1].level;\n            let minLevel = scalingAttributes[formType][0].level\n            if (castingLevel === \"Auto\") {\n                // if heightened level is lower than the min level of transformation, you cannot transform\n                if (heightenedLevel < minLevel) { \n                    ui.notifications.error(\"You are not a high enough level to transform into that form.\"); \n                    return;\n                }\n            } else {\n                heightenedLevel = parseInt(castingLevel)\n                if (heightenedLevel < minLevel) { \n                    ui.notifications.error(\"You cannot transform into that form at the selected spell level.\"); \n                    return;\n                }\n            }\n             \n            // add Form Attributes to token for reference\n            for (let group of formGroups) {\n                // find the class in formGroups that matches the formType from the selected option in the dialog\n                if (group.class === formType) { \n                    formData = (group.forms).find(element => element.name === actualForm);\n                    await actor.setFlag(\"world\", \"ws_formData\", formData);\n                }\n            }\n\n            if (heightenedLevel > maxLevel) { // if heightened level exceeds max level of spell, set it to work at max level\n                heightenedLevel = maxLevel;\n            };\n            \n            // add the scaling attributes of our selected form to our token for reference\n            // if the spell is being cast at less than max level, but not at a level for which there is a specific entry,\n            // find the next lowest level and cast it at that level\n            for (let i = 0; i <= heightenedLevel; i++) {\n                if (!levelAttributes) {\n                    scalingAttributes[formType].forEach(element => {\n                        if ((element.level + i) === heightenedLevel) {\n                            levelAttributes = element;\n                            actor.setFlag(\"world\", \"ws_levelAttributes\", levelAttributes)\n                            return;\n                        }\n                    })\n\n                }\n            }\n            \n            // if there are any form-specific skills, set those first\n            if (formData.skills) {\n                let formSkills = Object.keys(formData.skills)\n                for (let i = 0; i < formSkills.length; i++) {\n                    let modSkill = (Object.values(actor.data.data.skills)).find(element => element.name === formSkills[i])\n                    let modValue;\n                    if (formData.skills[formSkills[i]] !== modSkill.value) {\n                        modValue = formData.skills[formSkills[i]] - modSkill.value\n                    }\n                    await actor.addCustomModifier(modSkill.name, \"WSForm Value\", modValue, \"untyped\");\n                }\n            }\n\n            await featCheck(formData, formType);\n            await applyResistances(formData)\n\n            // if Form Athletics/Acrobatics bonus is greater than base Athletics/Acrobatics, add\n            // Form Bonus to Athletics/Acrobatics value\n\n            await skillBonus(levelAttributes.skills, actor.data.data.skills, formData.name);\n\n            // if Form AC bonus is greater than base AC, add Form Bonus to AC value\n            formValue = levelAttributes.ac + actor.data.data.details.level.value;\n            origValue = actor.data.data.attributes.ac.value;\n            if (formValue > origValue) {\n                const formACBonus = (formValue - origValue);\n                await actor.addCustomModifier(\"ac\", \"WSForm Bonus AC\", formACBonus, \"untyped\");\n            }\n\n            // if Form Attack Mod is less than Unarmed Attack mod of the actor, add a +2 to Unarmed\n            // Attack mod and let the form attacks use that instead\n            formValue = levelAttributes.mod\n            if ((actor.data.data.actions).find(action => action.name === \"Handwraps of Mighty Blows\")) {\n                origValue = (actor.data.data.actions).find(action => action.name === \"Handwraps of Mighty Blows\").totalModifier\n            } else {\n                origValue = ((actor.data.data.actions).find(action => action.name === \"Fist\")).totalModifier\n            }\n            if (formValue < (origValue + 2)) {\n                await actor.addCustomModifier(\"attack\", \"WSForm Bonus\", 2, \"status\");\n                levelAttributes.ownMod = (origValue + 2);\n                await actor.setFlag(\"world\", \"ws_levelAttributes\", levelAttributes)\n            }\n\n            // rememeber original senses for reset\n            origSenses = JSON.parse(JSON.stringify(actor.data.data.traits.senses));\n            await actor.setFlag(\"world\", \"ws_origSenses\", origSenses);\n            await setSenses();\n\n            // remember original speed for reset\n            origSpeeds = JSON.parse(JSON.stringify(actor.data.data.attributes.speed));\n            await actor.setFlag(\"world\", \"ws_origSpeeds\", origSpeeds);\n            await changeSpeeds();\n\n            // add temp HP, if Form Temp HP value is greater than already extant temp HP value\n            if (!tempHP || (tempHP < levelAttributes.temphp)) {\n                await actor.setFlag(\"world\", \"ws_tempHPChanged\", tempHP)\n                let newTempHP = levelAttributes.temphp\n                await actor.update({ \"data.attributes.hp.temp\": newTempHP });\n            };\n\n            // Change image. Make sure your images are labeled with the form name (w/ correct capitalization)\n            // at the end of your token name. Comment out the next three if you don't want the image to change\n            let origImg = token.data.img;\n            await actor.setFlag(\"world\", \"ws_origImg\", origImg)\n            let img = origImg.slice(0, -4) + (formData.name) + \".png\";\n            await token.update({ img });\n            await actor.update({ \"token.img\" : img})\n\n            // Change size\n            if (formData.size) {\n                await setSize(formData.size);\n            } else {\n                await setSize(levelAttributes.size);\n            }\n\n            // addFormDetails();\n\n        } else {\n            ui.notifications.error(\"Please return to normal form before transforming again.\"); \n            return;\n        }\n}\n\n// --------------------------------------------------------------------------\n// INIT\n// --------------------------------------------------------------------------\n\nif (actor.data.type !== \"character\") {\n    ui.notifications.error(\"Please select a player character token.\"); \n    return; \n}\n\nif (isSpellShaped) {\n    ui.notifications.error(\"Please use the Spell Shape macro\"); \n    return;\n}\n\n// Populate the featNames array with the name of the required feat for each formGroup e.g \"Insect Shape\" or \"Dragon Shape\".\nlet featNames = [];\nformGroups.forEach(group => featNames.push(group.group)) \n\n// From all the actor's feats, find the ones that match the names of the Wild Shape feats and put them in the wsFeats array - this will determine what forms they have access to in the dropdown.\nlet wsFeats = [];\nconst allFeats = (actor.data.items).filter(item => item.type === \"feat\") \nfor (let i=0; i<allFeats.length; i++) {\n    let findFeat = featNames.filter(name => name.includes(allFeats[i].name))\n    wsFeats = wsFeats.concat(findFeat);\n}\n\n// Populate dropdown based on what Wild Shape feats the actor has, and divide them by group\ncontent += `<div style=\"padding: 0 10px\"><label for=\"forms\">Choose your form</label>\n<select name=\"forms\" id=\"forms\">`\nfor (let formGroup of formGroups) {\n    if (wsFeats.includes(formGroup.group)) {\n        content += `<optgroup label=\"${formGroup.group}\">`\n        formGroup.forms.forEach(form => {\n            if ( !form.extraFeat || wsFeats.includes(form.extraFeat) ) {\n                content += `<option value=\"${form.name}\" class=\"${formGroup.class}\">${form.name}</option>`\n            }\n        })\n        content += `</optgroup>`\n    };\n}\ncontent += `</select>`\n\ncontent += `<div style=\"padding: 5px 0\"><label for=\"level\">What level are you casting at?</label>\n<select name=\"level\" id=\"level\">\n<option value=\"Auto\" selected>Auto</option>`\nfor (let i = 1; i <= heightenedLevel; i++){\n    content += `<option value=${i}>${i}</option>`\n}\ncontent += `</select></div></div>`\n\n// Generate dialog\n\nlet d = new Dialog({\n    title: \"Wild Shape\",\n    content: content,\n    buttons: {\n      morph: {\n        icon: \"<i class='fas fa-magic'></i>\",\n        label: \"Transform!\",\n        callback: (html) => transform(html),\n      },\n      revert: {\n          icon: \"<i class='fas fa-undo'></i>\",\n          label: \"Revert\",\n          callback: () => reset(),\n      },\n    },\n})\nrunDialog(d, null, 300);","author":"TKPF0VhpkrvAyBOK","img":"icons/svg/pawprint.svg","actorIds":[],"_id":"2d1IWSawQKCSZS8l"}
{"name":"Shape Strike","permission":{"default":0,"TKPF0VhpkrvAyBOK":3},"type":"script","flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.sKros2P9iYM1OPid"}},"scope":"global","command":"// ------------------------------------------------------------------\n// DECLARE VARIABLES\n//\n\nlet bonus;\n\n// Dialog Variables\nlet content = \"\";\n\nlet primeDice; // used to store information for primary damage roll\nlet wsAttack; // used to store information for the attack roll\nlet selectedStrike; // used to check if attack is agile; to link primary damage rolls with secondary damage rolls; to flavour attack/damage rolls\nlet plusDamageData = []; // array used to store all of the secondary damage rolls and their respective types\nlet mod;\nlet formData = actor.getFlag(\"world\", \"ws_formData\");\nif (!formData) {\n    formData = actor.getFlag(\"world\", \"ss_formData\");\n}\nlet levelAttributes = actor.getFlag(\"world\", \"ws_levelAttributes\")\nif (!levelAttributes) {\n    levelAttributes = actor.getFlag(\"world\", \"ss_levelAttributes\");\n}\n\n\n// -------------------------------------------------------------------\n// DECLARE FUNCTIONS\n//\n\nasync function roll(){\n    let attack = formData.attacks[selectedStrike]\n    let flavor = `<div>${selectedStrike} Attack</div>`\n    if (attack.addEffect) {\n        flavor += `<div style=\"line-height: normal; padding-bottom: 5px\"><span style=\"font-weight: bold; line-height: 5px\">Additional Effect: </span><span>${attack.addEffect}</div>`\n    }\n    if (attack.traits) {\n        flavor += `<div class=\"tags\">`\n        for (let trait of attack.traits) {\n            flavor += `<span class=\"tag tag_secondary\">${trait}</span>`\n        }\n        flavor += `</div>`\n    }\n\n    let messageData = {\n        user: game.user._id,\n        speaker: {\n            alias: actor.name + ` (${formData.name})`\n        },\n        flavor,\n    }\n    await wsAttack.toMessage(messageData);\n\n    // if the level of the spell indicates the damage dice should be doubled, set up the dice to do so\n    if (levelAttributes.double) {\n        primeDice = `${attack.dnum*2}d${attack.dsize}`\n    } else {\n        primeDice = `${attack.dnum}d${attack.dsize}`;\n    };\n\n    // if the attack has additional damage dice (like the snake's poison bite) set up those dice. Can support multiple additional damage dice\n    if (formData.plusattacks?.[selectedStrike]) {\n        let plusAttack = formData.plusattacks[selectedStrike]\n        let plusAttackDice;\n        if (levelAttributes.double) { // double if indicated\n            plusAttackDice = `${plusAttack.dnum*2}d${plusAttack.dsize}`\n        } else {\n            plusAttackDice = `${plusAttack.dnum}d${plusAttack.dsize}`\n        }\n        plusDamageData.push({\n            dice: plusAttackDice, \n            type: plusAttack.type,\n            bonus: plusAttack.bonus // in case the additional damage has a flat bonus to it\n        })\n    }\n\n    let wsDamage;\n    if (attack.type !== \"None\") { // Some attacks (like the Spider's Web attack, do no damage)\n        // If there is a form specific bonus to damage (as in Monstrosity Form), use that. Otherwise, use the standard damage bonus from level scaling\n        if (attack.bonus) { \n            wsDamage = new Roll(primeDice + \"+ @bonus\", {bonus: attack.bonus});\n        } else {\n            wsDamage = new Roll(primeDice + \"+ @bonus\", {bonus: levelAttributes.damage});\n        }\n        messageData = {\n            user: game.user._id,\n            speaker: {\n                alias: actor.name + ` (${formData.name})`\n            },\n            flavor: `${selectedStrike} Damage: ${attack.type}`\n        }\n        wsDamage.toMessage(messageData);\n    }\n\n    // If there is any additional damage to be applied to this attack, roll each of the additional damage dice, applying static bonuses to them if necessary.\n    if (plusDamageData.length !== 0) {\n        plusDamageData.forEach(plusDamage => {\n            let wsDamagePlus;\n            if (plusDamage.bonus) {\n                wsDamagePlus = new Roll(plusDamage.dice + \"+ @bonus\", {bonus: plusDamage.bonus});\n            } else {\n                wsDamagePlus = new Roll(plusDamage.dice);\n            }\n            messageData = {\n                user: game.user._id,\n                speaker: {\n                    alias: actor.name + ` (${formData.name})`\n                },\n                flavor: `${selectedStrike} Damage: ${plusDamage.type}`\n            }\n            wsDamagePlus.toMessage(messageData);\n        })\n                \n    };\n}\n\n// --------------------------------------------------------------------------\n// CODE\n//\n// if no formData is loaded on the actor, they aren't transformed\nif (!formData) {\n    ui.notifications.error(\"You are not currently transformed.\"); \n    return;\n};\n\n// If there are no attack details for the form (as in Pest Form), it cannot attack\nif (!formData.attacks) {\n    ui.notifications.error(\"This form cannot attack\"); \n    return;\n}\n\n// if there is an ownMod entry, use that as the attack mod instead of the one given by level \nif (levelAttributes.ownMod) {\n    mod = levelAttributes.ownMod;\n} else {\n    mod = levelAttributes.mod;\n}\n\n// Populate dropdown with attacks drawn from formData\ncontent += `<div style=\"text-align: center\"><label for=\"attack\">Choose your attack: </label>\n<div style=\"display: inline-block; padding: 0 8px\"><select name=\"attack\" id=\"attack\">`\nlet formAttacks = Object.keys(formData.attacks)\nfor (let i=0; i<formAttacks.length; i++) {\n    content += `<option value=\"${formAttacks[i]}\">${formAttacks[i]}`\n    if (formData.attacks[formAttacks[i]].traits) {\n        let traitString = formData.attacks[formAttacks[i]].traits.toString();\n        let spacedTraitString = traitString.replace(/,/g, \", \")\n        content += ` (${spacedTraitString})</option>`\n    }\n};\n\ncontent += `</select></div></div>\n<hr>\n<div style=\"padding-bottom: 5px; text-align: center\">What attack is this?\n</div>`\n\nlet d = new Dialog({\n    title: \"Shape Strike\",\n    content: content,\n    buttons: {\n        First: {\n            icon: \"<i class='fas fa-caret-square-right'></i>\",\n            label: \"First\",\n            callback: (html) => { \n                // selectedStrike is the attack picked in the dropdown menu, matched to its details in the embedded formData array\n                selectedStrike = html.find(\"#attack\")[0].value; \n                wsAttack = new Roll(\"1d20 + @mod\", {mod: mod});\n                roll();\n                this.execute()\n            },\n        },\n        Second: {\n            icon: \"<i class='far fa-caret-square-right'></i>\",\n            label: \"Second\",\n            callback: (html) => {\n                selectedStrike = html.find(\"#attack\")[0].value; \n                if (attack.traits?.includes(\"Agile\")) {\n                    wsAttack = new Roll(\"1d20 + @mod + @pen\", {mod: mod, pen: -4});\n                } else {\n                    wsAttack = new Roll(\"1d20 + @mod + @pen\", {mod: mod, pen: -5});\n                }\n                roll();\n                this.execute()\n            },\n        },\n        Third: {\n            icon: \"<i class='fas fa-caret-right'></i>\",\n            label: \"Third+\",\n            callback: (html) => {\n                selectedStrike = html.find(\"#attack\")[0].value; \n                if (attack.traits?.includes(\"Agile\")) {\n                    wsAttack = new Roll(\"1d20 + @mod + @pen\", {mod: mod, pen: -8});\n                } else {\n                    wsAttack = new Roll(\"1d20 + @mod + @pen\", {mod: mod, pen: -10});\n                }\n                roll();\n                this.execute()\n            }\n        }\n    },\n}).render(true);","author":"TKPF0VhpkrvAyBOK","img":"icons/svg/sword.svg","actorIds":[],"_id":"j9IZMYteBbI5UcVw"}
